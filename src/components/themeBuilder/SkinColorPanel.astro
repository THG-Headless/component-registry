---
import { parseColorValue } from "./utils/skinColorParser";

interface Props {
  skinName: string;
  category: string;
  state: string;
  colorValue: string;
}

const { skinName, category, state, colorValue } = Astro.props;

// Create a unique panel ID
const panelId = `panel-${skinName}-${category}-${state}`;
---

<div
  id={panelId}
  class="skin-color-panel hidden p-4 bg-zinc-800 rounded mb-4"
  data-skin-name={skinName}
  data-category={category}
  data-state={state}
  data-original-color={colorValue}
>
  <h4 class="text-lg text-zinc-100 mb-3">{category} - {state}</h4>

  <!-- Display the actual resolved color value -->
  <div class="mb-4 flex items-center">
    <div class="w-8 h-8 rounded mr-2" data-color-preview></div>
    <div class="text-sm text-zinc-300 font-mono" data-value-display>
      {colorValue}
    </div>
  </div>

  <!-- Base Color Selection -->
  <div class="base-color-section mb-4">
    <h3 class="text-md text-zinc-200 mb-2">Base Color</h3>
    <div
      class="base-colors flex flex-wrap gap-2 pb-2"
      data-base-colors-container
    >
      <!-- Will be populated by script -->
    </div>
  </div>

  <!-- Shades Section -->
  <div class="shades-section mb-4 hidden">
    <h3 class="text-md text-zinc-200 mb-2">Shades</h3>
    <div class="shades flex space-x-2 overflow-x-auto pb-2" data-base-color="">
    </div>
  </div>

  <!-- Aliases Section -->
  <div class="aliases-section hidden">
    <h3 class="text-md text-zinc-200 mb-2">Aliases</h3>
    <div class="aliases space-y-2"></div>
  </div>

  <script define:vars={{ panelId, skinName, category, state, colorValue }}>
    document.addEventListener("DOMContentLoaded", () => {
      // Get panel by ID
      const panel = document.getElementById(panelId);
      if (!panel) {
        console.error(`Panel not found: ${panelId}`);
        return;
      }

      let originalColor = colorValue;
      let isInitialized = false;

      // Function to calculate explicit color from CSS variable - IMPROVED VERSION
      function calculateExplicitColor(colorVar) {
        if (!colorVar || typeof colorVar !== "string") return "transparent";
        if (!colorVar.startsWith("var(--color-")) return colorVar;

        try {
          const currentStyles =
            window.currentStyles ||
            JSON.parse(localStorage.getItem("altitude-theme-styles") || "{}");

          // Parse the variable: var(--color-name-shade)
          const match = colorVar.match(
            /var\(--color-([a-z]+)(?:-([a-z0-9_]+))?\)/i
          );
          if (!match) return "transparent";

          const [, colorName, shadeOrAlias] = match;

          // Handle simple colors like white/black
          if (colorName === "white") return "#ffffff";
          if (colorName === "black") return "#000000";

          // Get the base color
          const baseColor = currentStyles?.colours?.site?.[colorName];
          if (!baseColor) return "transparent";

          // If it's just the base color with no shade/alias
          if (!shadeOrAlias) return baseColor;

          // Handle numeric shades
          if (/^\d+$/.test(shadeOrAlias)) {
            // For shade 500, it references the base color directly
            if (shadeOrAlias === "500") return baseColor;

            // Get the shade formula or value
            const shades = currentStyles?.colours?.shades?.[colorName];
            if (!shades || !shades[shadeOrAlias]) return baseColor;

            const formula = shades[shadeOrAlias];

            // If it's a direct color value (not a formula), return it
            if (!formula.includes("oklch(from")) return formula;

            // Otherwise we need to compute the shade using the formula
            return resolveOklchFormula(formula, colorName, currentStyles);
          }

          // Handle aliases
          if (currentStyles?.colours?.alias?.[colorName]?.[shadeOrAlias]) {
            const aliasShade =
              currentStyles.colours.alias[colorName][shadeOrAlias];
            return calculateExplicitColor(
              `var(--color-${colorName}-${aliasShade})`
            );
          }

          // Fallback to base color
          return baseColor;
        } catch (error) {
          console.error("Error calculating color:", error);
          return "transparent";
        }
      }

      // NEW: Resolve an OKLCH formula properly
      function resolveOklchFormula(formula, colorName, currentStyles) {
        try {
          // Example formula: "oklch(from var(--color-primary-500) calc(1 - (1 - l) * 0.6) calc(c * 0.8) calc(h + 0))"
          const refMatch = formula.match(
            /from\s+var\(--color-([a-z]+)-?(\d+)?\)/i
          );
          if (!refMatch) return formula;

          const refColorName = refMatch[1];
          const refShade = refMatch[2] || null;

          // Get the reference color's explicit value
          let refColor;

          if (refShade) {
            // Reference is to another shade
            refColor = calculateExplicitColor(
              `var(--color-${refColorName}-${refShade})`
            );
          } else {
            // Reference is to the base color
            refColor =
              currentStyles?.colours?.site?.[refColorName] || "transparent";
          }

          // If not OKLCH, cannot process further
          if (!refColor.startsWith("oklch")) return refColor;

          // Parse OKLCH parameters
          const colorMatch = refColor.match(
            /oklch\(([0-9.]+)\s+([0-9.]+)\s+([0-9.]+)\)/
          );
          if (!colorMatch) return refColor;

          const l = parseFloat(colorMatch[1]);
          const c = parseFloat(colorMatch[2]);
          const h = parseFloat(colorMatch[3]);

          // Parse transformation formulas
          let newL = l;
          let newC = c;
          let newH = h;

          // Lightness modifier: calc(1 - (1 - l) * 0.6) or calc(l * 0.8)
          if (formula.includes("calc(1 - (1 - l)")) {
            const factorMatch = formula.match(
              /calc\(1 - \(1 - l\) \* ([0-9.]+)\)/
            );
            if (factorMatch) {
              const factor = parseFloat(factorMatch[1]);
              newL = 1 - (1 - l) * factor;
            }
          } else if (formula.includes("calc(l *")) {
            const factorMatch = formula.match(/calc\(l \* ([0-9.]+)\)/);
            if (factorMatch) {
              const factor = parseFloat(factorMatch[1]);
              newL = l * factor;
            }
          }

          // Chroma modifier: calc(c * 0.8) or calc(c * 1.1)
          if (formula.includes("calc(c *")) {
            const factorMatch = formula.match(/calc\(c \* ([0-9.]+)\)/);
            if (factorMatch) {
              const factor = parseFloat(factorMatch[1]);
              newC = c * factor;
            }
          }

          // Hue modifier: calc(h + 0) or other offsets
          if (formula.includes("calc(h +")) {
            const offsetMatch = formula.match(/calc\(h \+ ([0-9.]+)\)/);
            if (offsetMatch) {
              const offset = parseFloat(offsetMatch[1]);
              newH = h + offset;
            }
          }

          // Ensure values are in valid ranges
          newL = Math.max(0, Math.min(1, newL));
          newC = Math.max(0, Math.min(0.4, newC)); // Maximum chroma in OKLCH
          newH = (newH + 360) % 360; // Keep hue in 0-360 range

          return `oklch(${newL.toFixed(4)} ${newC.toFixed(4)} ${newH.toFixed(2)})`;
        } catch (error) {
          console.error("Error resolving OKLCH formula:", error);
          return formula;
        }
      }

      // Calculate a shade color based on base color and shade number
      function calculateShadeColor(baseColor, shade) {
        try {
          // Handle hex colors
          if (baseColor.startsWith("#")) {
            const r = parseInt(baseColor.slice(1, 3), 16);
            const g = parseInt(baseColor.slice(3, 5), 16);
            const b = parseInt(baseColor.slice(5, 7), 16);

            if (shade < 500) {
              // Lighter shade - more white
              const factor = 1 - shade / 500;
              return `rgb(${Math.min(255, Math.round(r + (255 - r) * factor))}, 
                          ${Math.min(255, Math.round(g + (255 - g) * factor))}, 
                          ${Math.min(255, Math.round(b + (255 - b) * factor))})`;
            } else {
              // Darker shade - more black
              const factor = (shade - 500) / 500;
              return `rgb(${Math.round(r * (1 - factor))}, 
                          ${Math.round(g * (1 - factor))}, 
                          ${Math.round(b * (1 - factor))})`;
            }
          }

          // Handle OKLCH colors
          if (baseColor.startsWith("oklch")) {
            const matches = baseColor.match(
              /oklch\(([0-9.]+)\s+([0-9.]+)\s+([0-9.]+)\)/
            );
            if (matches) {
              const l = parseFloat(matches[1]);
              const c = parseFloat(matches[2]);
              const h = parseFloat(matches[3]);

              if (shade < 500) {
                // Lighter
                const factor = 1 - shade / 500;
                const newL = Math.min(0.98, l + (1 - l) * factor * 0.8);
                const newC = Math.max(0, c * (1 - factor * 0.5));
                return `oklch(${newL.toFixed(3)} ${newC.toFixed(3)} ${h})`;
              } else {
                // Darker
                const factor = (shade - 500) / 500;
                const newL = l * (1 - factor * 0.8);
                const newC = c * (1 - factor * 0.3);
                return `oklch(${newL.toFixed(3)} ${newC.toFixed(3)} ${h})`;
              }
            }
          }

          return baseColor;
        } catch (err) {
          console.error("Error calculating shade:", err);
          return baseColor;
        }
      }

      // Extract the base color name from var(--color-name-shade)
      function getBaseColorFromVar(cssVar) {
        if (!cssVar || typeof cssVar !== "string") return "";
        const match = cssVar.match(
          /var\(--color-([a-z]+)(?:-\w+)?(?:-[a-z]+)?\)/i
        );
        return match ? match[1] : "";
      }

      // Update the preview panel with current color value
      function updatePanelPreview() {
        // First get the current color from storage
        const storedColor = getCurrentStoredColor();
        if (storedColor) {
          originalColor = storedColor;
        }

        // Calculate the explicit color
        const explicitColor = calculateExplicitColor(originalColor);

        // Update UI elements
        const colorPreview = panel.querySelector("[data-color-preview]");
        const valueDisplay = panel.querySelector("[data-value-display]");
        const resolvedDisplay = panel.querySelector("[data-resolved-display]");

        if (colorPreview) {
          colorPreview.style.backgroundColor = explicitColor;
        }

        if (valueDisplay) {
          valueDisplay.textContent = `CSS Variable: ${originalColor}`;
        }

        if (resolvedDisplay) {
          resolvedDisplay.textContent = explicitColor;
        }

        // Update the active state in the base color grid
        if (isInitialized) {
          const activeBaseColor = getBaseColorFromVar(originalColor);
          updateActiveBaseColor(activeBaseColor);
        }
      }

      // Get color from storage
      function getCurrentStoredColor() {
        try {
          if (window.currentStyles?.skins?.[skinName]?.[category]?.[state]) {
            return window.currentStyles.skins[skinName][category][state];
          }

          // Try localStorage as fallback
          const stored = localStorage.getItem("altitude-theme-styles");
          if (stored) {
            const parsedStorage = JSON.parse(stored);
            return parsedStorage.skins?.[skinName]?.[category]?.[state];
          }
        } catch (err) {
          console.error("Error getting stored color:", err);
        }
        return null;
      }

      // Update which base color is active in the grid
      function updateActiveBaseColor(activeColorName) {
        const baseColorsContainer = panel.querySelector(
          "[data-base-colors-container]"
        );
        if (!baseColorsContainer) return;

        baseColorsContainer
          .querySelectorAll(".base-color")
          .forEach((swatch) => {
            const colorName = swatch.dataset.baseColor;
            if (colorName === activeColorName) {
              swatch.classList.add("ring-2", "ring-white");
            } else {
              swatch.classList.remove("ring-2", "ring-white");
            }
          });
      }

      // Setup the base colors grid - IMPROVED VERSION
      function setupBaseColors() {
        const baseColorsContainer = panel.querySelector(
          "[data-base-colors-container]"
        );
        if (!baseColorsContainer) return;

        // Clear current content
        baseColorsContainer.innerHTML = "";

        // Get current theme colors
        const currentStyles =
          window.currentStyles ||
          JSON.parse(localStorage.getItem("altitude-theme-styles") || "{}");

        // Handle missing colors gracefully
        if (
          !currentStyles?.colours?.site ||
          Object.keys(currentStyles.colours.site).length === 0
        ) {
          baseColorsContainer.innerHTML =
            '<div class="text-zinc-500">No colors available</div>';
          return;
        }

        // Get active base color from current value
        const activeColorName = getBaseColorFromVar(originalColor);

        // Create a swatch for each site color
        Object.entries(currentStyles.colours.site).forEach(
          ([colorName, colorValue]) => {
            // Skip non-string values
            if (typeof colorValue !== "string") return;

            const swatch = document.createElement("button");
            swatch.className = `base-color aspect-square w-8 rounded hover:ring-2 hover:ring-blue-500 transition-all ${
              colorName === activeColorName ? "ring-2 ring-white" : ""
            }`;
            swatch.style.backgroundColor = colorValue;
            swatch.title = colorName;
            swatch.dataset.baseColor = colorName;

            // Add screen reader label
            const srText = document.createElement("span");
            srText.className = "sr-only";
            srText.textContent = colorName;
            swatch.appendChild(srText);

            // Add click handler
            swatch.addEventListener("click", () => {
              // Update UI - mark this as selected
              baseColorsContainer
                .querySelectorAll(".base-color")
                .forEach((btn) => {
                  btn.classList.remove("ring-2", "ring-white");
                });
              swatch.classList.add("ring-2", "ring-white");

              // Set new color value
              const newValue = `var(--color-${colorName})`;
              updateSkinColor(newValue);

              // Show shades and aliases
              showShadesForColor(colorName);
              showAliasesForColor(colorName);
            });

            baseColorsContainer.appendChild(swatch);
          }
        );

        isInitialized = true;
      }

      // Show shades for a color - FIXED with better formula resolution
      function showShadesForColor(colorName) {
        const shadesSection = panel.querySelector(".shades-section");
        const shadesContainer = panel.querySelector(".shades");
        if (!shadesSection || !shadesContainer) return;

        try {
          // Get current stored theme data
          const currentStyles =
            window.currentStyles ||
            JSON.parse(localStorage.getItem("altitude-theme-styles") || "{}");

          // Get shades from the styles
          const shades = currentStyles?.colours?.shades?.[colorName];

          if (!shades || Object.keys(shades).length === 0) {
            shadesSection.classList.add("hidden");
            return;
          }

          // Show the section
          shadesSection.classList.remove("hidden");
          shadesContainer.innerHTML = "";

          // We need to determine the currently selected shade (if any)
          // Extract shade from the color variable format: var(--color-primary-500)
          const shadeMatch = originalColor.match(
            /var\(--color-[a-z]+-(\d+)\)/i
          );
          const currentShade = shadeMatch ? shadeMatch[1] : null;

          // Define standard shade scale for consistent order
          const standardShades = [
            "50",
            "100",
            "200",
            "300",
            "400",
            "500",
            "600",
            "700",
            "800",
            "900",
            "950",
          ];

          // Add buttons for standard shades if they exist
          standardShades.forEach((shade) => {
            if (!shades[shade]) return; // Skip if this shade doesn't exist

            const shadeBtn = document.createElement("button");
            shadeBtn.className = `shade-color aspect-square w-8 rounded transition-all ${
              shade === currentShade
                ? "ring-2 ring-white"
                : "hover:ring-2 hover:ring-blue-500"
            }`;

            // Get explicit color for this shade using improved formula resolution
            const cssVar = `var(--color-${colorName}-${shade})`;
            const explicitColor = calculateExplicitColor(cssVar);

            // Apply the calculated color
            shadeBtn.style.backgroundColor = explicitColor;
            shadeBtn.title = `${colorName}-${shade}`;
            shadeBtn.dataset.shade = shade;
            shadeBtn.dataset.resolvedColor = explicitColor; // Store resolved color

            // Add click handler to select this shade
            shadeBtn.addEventListener("click", () => {
              // Update visual selection
              shadesContainer
                .querySelectorAll(".shade-color")
                .forEach((btn) => {
                  btn.classList.remove("ring-2", "ring-white");
                });
              shadeBtn.classList.add("ring-2", "ring-white");

              // Create variable reference for this shade
              const newValue = `var(--color-${colorName}-${shade})`;

              // Update value with the already resolved color
              updateSkinColor(newValue, explicitColor);
            });

            shadesContainer.appendChild(shadeBtn);
          });
        } catch (error) {
          console.error("Error setting up shades:", error);
          shadesSection.classList.add("hidden");
        }
      }

      // Show aliases for a color
      function showAliasesForColor(colorName) {
        const aliasesSection = panel.querySelector(".aliases-section");
        const aliasesContainer = panel.querySelector(".aliases");
        if (!aliasesSection || !aliasesContainer) return;

        // Get current stored theme data
        const currentStyles =
          window.currentStyles ||
          JSON.parse(localStorage.getItem("altitude-theme-styles") || "{}");

        // Check for aliases
        const aliases = currentStyles?.colours?.alias?.[colorName];
        if (!aliases || Object.keys(aliases).length === 0) {
          aliasesSection.classList.add("hidden");
          return;
        }

        // Show aliases section
        aliasesSection.classList.remove("hidden");
        aliasesContainer.innerHTML = "";

        // Create a button for each alias
        Object.entries(aliases).forEach(([aliasName, shadeValue]) => {
          const aliasBtn = document.createElement("button");
          aliasBtn.className =
            "alias-item flex items-center space-x-2 w-full p-2 rounded hover:bg-zinc-700 transition-all";

          // Create swatch with explicit color
          const cssVar = `var(--color-${colorName}-${shadeValue})`;
          const explicitColor = calculateExplicitColor(cssVar);

          const swatch = document.createElement("div");
          swatch.className = "alias-swatch w-6 h-6 rounded";
          swatch.style.backgroundColor = explicitColor;

          // Create label
          const label = document.createElement("span");
          label.className = "text-zinc-200";
          label.textContent = aliasName.replace(/_/g, "-");

          // Assemble button
          aliasBtn.appendChild(swatch);
          aliasBtn.appendChild(label);

          // Add click handler
          aliasBtn.addEventListener("click", () => {
            const newValue = `var(--color-${colorName}-${aliasName})`;
            updateSkinColor(newValue);
          });

          aliasesContainer.appendChild(aliasBtn);
        });
      }

      // Update the skin color with pre-resolved color
      function updateSkinColor(newValue, preResolvedColor = null) {
        // Update local state
        originalColor = newValue;
        panel.dataset.originalColor = newValue;

        // Calculate explicit color if not provided
        const explicitColor =
          preResolvedColor || calculateExplicitColor(newValue);

        // Update UI preview elements
        const colorPreview = panel.querySelector("[data-color-preview]");
        const valueDisplay = panel.querySelector("[data-value-display]");

        if (colorPreview) {
          colorPreview.style.backgroundColor = explicitColor;
        }

        if (valueDisplay) {
          valueDisplay.textContent = newValue;
        }

        // Update grid swatch with pre-resolved color for immediate feedback
        updateGridSwatch(newValue, explicitColor);

        // Update active base color and shade selectors
        const baseColor = getBaseColorFromVar(newValue);
        if (baseColor) {
          updateActiveBaseColor(baseColor);
          updateActiveShade();
        }

        // Update storage
        if (window.altitudeThemeBuilder?.updateSkinColor) {
          window.altitudeThemeBuilder.updateSkinColor(
            skinName,
            category,
            state,
            newValue
          );
        } else {
          directUpdateStorage(newValue);
        }
      }

      // Direct storage update as fallback
      function directUpdateStorage(newValue) {
        try {
          // Get current styles
          let currentStyles;
          try {
            currentStyles =
              window.currentStyles ||
              JSON.parse(localStorage.getItem("altitude-theme-styles") || "{}");
          } catch (e) {
            currentStyles = window.currentStyles || {};
          }

          // Create structure if needed
          if (!currentStyles.skins) currentStyles.skins = {};
          if (!currentStyles.skins[skinName])
            currentStyles.skins[skinName] = {};
          if (!currentStyles.skins[skinName][category])
            currentStyles.skins[skinName][category] = {};

          // Update value
          currentStyles.skins[skinName][category][state] = newValue;
          window.currentStyles = currentStyles;

          // Save to localStorage
          localStorage.setItem(
            "altitude-theme-styles",
            JSON.stringify(currentStyles)
          );

          // Dispatch events
          document.dispatchEvent(
            new CustomEvent("skinColorUpdated", {
              detail: { skinName, category, state, colorValue: newValue },
              bubbles: true,
            })
          );
        } catch (error) {
          console.error("Error updating storage:", error);
        }
      }

      // Update grid swatch with pre-resolved color
      function updateGridSwatch(newValue, explicitColor = null) {
        const swatch = document.querySelector(`[data-panel-id="${panelId}"]`);
        if (!swatch) return;

        // Use pre-resolved color if available, otherwise calculate it
        const color = explicitColor || calculateExplicitColor(newValue);

        // Update swatch
        swatch.style.backgroundColor = color;
        swatch.dataset.originalColor = newValue;
        swatch.dataset.resolvedColor = color;

        // Also refresh all swatches
        if (typeof window.refreshSkinSwatches === "function") {
          window.refreshSkinSwatches();
        }
      }

      // Update which shade is active after a color change
      function updateActiveShade() {
        const baseColor = getBaseColorFromVar(originalColor);
        if (!baseColor) return;

        const shadesContainer = panel.querySelector(".shades");
        if (!shadesContainer) return;

        // Check if the current color has a shade specification
        const shadeMatch = originalColor.match(/var\(--color-[a-z]+-(\d+)\)/i);
        if (!shadeMatch || !shadeMatch[1]) return;

        const shade = shadeMatch[1];

        // Update the shade buttons to reflect the active shade
        shadesContainer.querySelectorAll("[data-shade]").forEach((btn) => {
          if (btn.dataset.shade === shade) {
            btn.classList.add("ring-2", "ring-white");
          } else {
            btn.classList.remove("ring-2", "ring-white");
          }
        });
      }

      // Initialize panel
      function initializePanel() {
        // Run immediate updates
        updatePanelPreview();
        setupBaseColors();

        // Additional updates based on current color
        const baseColor = getBaseColorFromVar(originalColor);
        if (baseColor) {
          console.log(`Initializing with base color: ${baseColor}`);
          showShadesForColor(baseColor);
          showAliasesForColor(baseColor);
          updateActiveShade();
        }

        // Listen for theme updates
        document.addEventListener("stylesUpdated", () => {
          updatePanelPreview();
          setupBaseColors();

          const baseColor = getBaseColorFromVar(originalColor);
          if (baseColor) {
            showShadesForColor(baseColor);
            showAliasesForColor(baseColor);
            updateActiveShade();
          }
        });

        document.addEventListener("skinColorUpdated", (e) => {
          const detail = e.detail || {};
          // Only update if it's not our own event (avoid loops)
          if (
            detail.skinName === skinName &&
            detail.category === category &&
            detail.state === state
          ) {
            return;
          }
          updatePanelPreview();
        });
      }

      // Wait for theme data to be available
      function waitForStyles() {
        if (window.currentStyles) {
          initializePanel();
        } else {
          setTimeout(waitForStyles, 100);
        }
      }

      // Start initialization
      waitForStyles();
    });
  </script>
</div>

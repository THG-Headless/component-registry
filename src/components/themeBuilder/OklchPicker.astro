---
interface Props {
  id: string;
  color?: string;
}

interface State {
  l: number;
  c: number;
  h: number;
  hex: string;
  isDragging: boolean;
  dragTarget: string | null;
  originalColor: string;
}

const { id, color = "oklch(0.5 0.2 240)" } = Astro.props;
---

<div class="oklch-picker" data-picker-id={id}>
  <div
    class="oklch-picker-container bg-zinc-800 border border-zinc-700 rounded-lg p-4"
  >
    <!-- Color preview section at the top -->
    <div class="color-preview mb-4 flex items-end justify-between">
      <div class="flex items-end gap-3 flex-grow">
        <div class="flex-1 flex flex-col">
          <span class="text-xs text-zinc-400 mb-1">Original</span>
          <div
            class="original-swatch h-8 rounded border border-zinc-600"
            style={`background-color: ${color};`}
          >
          </div>
        </div>
        <div class="flex-1 flex flex-col">
          <span class="text-xs text-zinc-400 mb-1">New</span>
          <div class="preview-swatch h-8 rounded border border-zinc-600"></div>
        </div>
      </div>

      <button
        class="apply-color bg-purple-600 hover:bg-purple-500 text-white px-3 py-1 rounded text-sm ml-3 h-8"
      >
        Apply
      </button>
    </div>

    <!-- Vertical sliders section -->
    <div class="sliders-container flex justify-center space-x-6 mb-4">
      <!-- Hue slider -->
      <div class="slider-container flex flex-col items-center">
        <span class="text-xs text-zinc-400 mb-1">H</span>
        <div class="relative h-48 flex items-center">
          <div
            class="hue-slider relative w-10 h-full rounded cursor-pointer"
            data-hue-slider
            style=""
          >
            <!-- Styled dynamically via JS -->
          </div>
          <!-- Hue selector indicator -->
          <div
            class="hue-indicator absolute w-12 h-2 bg-white border border-black transform -translate-y-1/2 -left-1 rounded pointer-events-none"
            data-hue-indicator
          >
          </div>
        </div>
        <input
          type="text"
          class="input-hue-value w-12 mt-2 px-1 py-1 bg-zinc-900 text-zinc-300 text-xs rounded border border-zinc-700 text-center"
          size="3"
        />
      </div>

      <!-- Lightness slider -->
      <div class="slider-container flex flex-col items-center">
        <span class="text-xs text-zinc-400 mb-1">L</span>
        <div class="relative h-48 flex items-center">
          <div
            class="lightness-slider relative w-10 h-full rounded cursor-pointer"
            data-lightness-slider
            style=""
          >
            <!-- Styled dynamically via JS -->
          </div>
          <!-- Lightness selector indicator -->
          <div
            class="lightness-indicator absolute w-12 h-2 bg-white border border-black transform -translate-y-1/2 -left-1 rounded pointer-events-none"
            data-lightness-indicator
          >
          </div>
        </div>
        <input
          type="text"
          class="input-lightness-value w-12 mt-2 px-1 py-1 bg-zinc-900 text-zinc-300 text-xs rounded border border-zinc-700 text-center"
          size="3"
        />
      </div>

      <!-- Chroma slider -->
      <div class="slider-container flex flex-col items-center">
        <span class="text-xs text-zinc-400 mb-1">C</span>
        <div class="relative h-48 flex items-center">
          <div
            class="chroma-slider relative w-10 h-full rounded cursor-pointer"
            data-chroma-slider
            style=""
          >
            <!-- Styled dynamically via JS -->
          </div>
          <!-- Chroma selector indicator -->
          <div
            class="chroma-indicator absolute w-12 h-2 bg-white border border-black transform -translate-y-1/2 -left-1 rounded pointer-events-none"
            data-chroma-indicator
          >
          </div>
        </div>
        <input
          type="text"
          class="input-chroma-value w-12 mt-2 px-1 py-1 bg-zinc-900 text-zinc-300 text-xs rounded border border-zinc-700 text-center"
          size="3"
        />
      </div>
    </div>

    <!-- Color code inputs -->
    <div class="color-inputs grid grid-cols-2 gap-4 mt-2">
      <div>
        <label class="text-xs text-zinc-400 mb-1 block">OKLCH</label>
        <input
          type="text"
          class="input-oklch w-full px-2 py-1 bg-zinc-900 text-zinc-300 text-sm rounded border border-zinc-700"
          value={color}
        />
      </div>

      <div>
        <label class="text-xs text-zinc-400 mb-1 block">HEX/RGB</label>
        <input
          type="text"
          class="input-hex w-full px-2 py-1 bg-zinc-900 text-zinc-300 text-sm rounded border border-zinc-700"
        />
      </div>
    </div>
  </div>
</div>

<script>
  import space from "color-space";

  class OklchPicker {
    container: HTMLElement;
    id: string;
    inputOklch: HTMLInputElement;
    inputHex: HTMLInputElement;
    inputLValue: HTMLInputElement;
    inputCValue: HTMLInputElement;
    inputHValue: HTMLInputElement;
    hueSlider: HTMLDivElement;
    hueIndicator: HTMLDivElement;
    lightnessSlider: HTMLDivElement;
    lightnessIndicator: HTMLDivElement;
    chromaSlider: HTMLDivElement;
    chromaIndicator: HTMLDivElement;
    previewSwatch: HTMLDivElement;
    originalSwatch: HTMLDivElement;
    applyButton: HTMLButtonElement;
    originalColor: string;
    l: number;
    c: number;
    h: number;
    hex: string;
    isDragging: boolean;
    dragTarget: string | null;

    constructor(element: HTMLElement) {
      this.container = element;
      this.id = element.dataset.pickerId!;

      // Input elements
      this.inputOklch = element.querySelector(
        ".input-oklch"
      ) as HTMLInputElement;
      this.inputHex = element.querySelector(".input-hex") as HTMLInputElement;
      this.inputLValue = element.querySelector(
        ".input-lightness-value"
      ) as HTMLInputElement;
      this.inputCValue = element.querySelector(
        ".input-chroma-value"
      ) as HTMLInputElement;
      this.inputHValue = element.querySelector(
        ".input-hue-value"
      ) as HTMLInputElement;

      // UI elements for the color pickers
      this.hueSlider = element.querySelector(
        "[data-hue-slider]"
      ) as HTMLDivElement;
      this.hueIndicator = element.querySelector(
        "[data-hue-indicator]"
      ) as HTMLDivElement;
      this.lightnessSlider = element.querySelector(
        "[data-lightness-slider]"
      ) as HTMLDivElement;
      this.lightnessIndicator = element.querySelector(
        "[data-lightness-indicator]"
      ) as HTMLDivElement;
      this.chromaSlider = element.querySelector(
        "[data-chroma-slider]"
      ) as HTMLDivElement;
      this.chromaIndicator = element.querySelector(
        "[data-chroma-indicator]"
      ) as HTMLDivElement;

      this.previewSwatch = element.querySelector(
        ".preview-swatch"
      ) as HTMLDivElement;
      this.originalSwatch = element.querySelector(
        ".original-swatch"
      ) as HTMLDivElement;
      this.applyButton = element.querySelector(
        ".apply-color"
      ) as HTMLButtonElement;

      // State - use the actual color passed in from parent for originalColor
      // instead of just taking the OKLCH input value
      const origColor = this.originalSwatch.style.backgroundColor;
      this.originalColor = origColor || this.inputOklch.value;

      // Initialize with default values (these will be updated by parseInitialColor)
      this.l = 0.5;
      this.c = 0.1;
      this.h = 240;
      this.hex = "#ffffff";
      this.isDragging = false;
      this.dragTarget = null;

      // Make sure original swatch is displaying the current parent color
      if (origColor) {
        this.originalSwatch.style.backgroundColor = origColor;
      }

      // Make sure we can update the original swatch later
      this.updateOriginalSwatch = this.updateOriginalSwatch.bind(this);

      // Initialize
      this.parseInitialColor = this.parseInitialColor.bind(this);
      this.setupEventListeners = this.setupEventListeners.bind(this);
      this.updateUI = this.updateUI.bind(this);
      this.updateSliderBackgrounds = this.updateSliderBackgrounds.bind(this);
      this.handleMouseMove = this.handleMouseMove.bind(this);
      this.handleMouseUp = this.handleMouseUp.bind(this);
      this.handleHueSliderChange = this.handleHueSliderChange.bind(this);
      this.handleLightnessSliderChange =
        this.handleLightnessSliderChange.bind(this);
      this.handleChromaSliderChange = this.handleChromaSliderChange.bind(this);

      this.parseInitialColor();

      // Set the preview swatch to match the original color initially
      this.previewSwatch.style.backgroundColor = this.originalColor;

      this.setupEventListeners();
      this.updateUI();
    }

    parseInitialColor() {
      // First check if we have an original color from the swatch
      if (this.originalSwatch && this.originalSwatch.style.backgroundColor) {
        const origColor = this.originalSwatch.style.backgroundColor;

        // If it's in oklch format, parse it directly
        if (origColor.startsWith("oklch")) {
          const match = origColor.match(
            /oklch\(\s*([\d.]+)\s+([\d.]+)\s+([\d.]+)\s*\)/i
          );

          if (match) {
            this.l = parseFloat(match[1]);
            this.c = parseFloat(match[2]);
            this.h = parseFloat(match[3]);
            // Update the oklch input to match the original color
            this.inputOklch.value = origColor;
            this.updateHexFromOklch();
            return;
          }
        } else {
          // If it's in another format like rgb/hex, we need to convert it
          try {
            // Use the original color for the hex input
            this.inputHex.value = origColor;
            // Then convert to oklch
            this.updateOklchFromHex();
            return;
          } catch (e) {
            console.error("Error converting original color to OKLCH:", e);
          }
        }
      }

      // If no original color or conversion failed, fall back to the input value
      const oklchStr = this.inputOklch.value.trim();
      const match = oklchStr.match(
        /oklch\(\s*([\d.]+)\s+([\d.]+)\s+([\d.]+)\s*\)/i
      );

      if (match) {
        this.l = parseFloat(match[1]);
        this.c = parseFloat(match[2]);
        this.h = parseFloat(match[3]);
      } else {
        // Default values if parsing fails
        this.l = 0.5;
        this.c = 0.1;
        this.h = 240;
      }

      this.updateHexFromOklch();
    }

    // New hex to RGB parser with proper handling
    hexToRgb(hex: string) {
      hex = hex.replace(/^#/, "");

      // Handle shorthand hex (#RGB)
      if (hex.length === 3) {
        hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
      }

      const r = parseInt(hex.slice(0, 2), 16);
      const g = parseInt(hex.slice(2, 4), 16);
      const b = parseInt(hex.slice(4, 6), 16);

      return [r, g, b];
    }

    // Convert RGB to hex string
    rgbToHex(rgb: [number, number, number]) {
      return (
        "#" +
        rgb
          .map((v) => {
            const hex = Math.max(0, Math.min(255, Math.round(v))).toString(16);
            return hex.length === 1 ? "0" + hex : hex;
          })
          .join("")
      );
    }

    // Update hex value from OKLCH using color-space
    updateHexFromOklch() {
      try {
        // XYZ to RGB
        const rgbValues =
          space.rgb && space.rgb.lchab
            ? space.rgb.lchab([this.l * 100, this.c * 100, this.h])
            : [0, 0, 0];

        // RGB to hex - ensure values are clamped to valid range
        const clampedRGB = rgbValues.map((v) =>
          Math.max(0, Math.min(255, Math.round(v)))
        );
        this.hex = this.rgbToHex(clampedRGB as [number, number, number]);
        this.inputHex.value = this.hex;
      } catch (e) {
        console.error("Error converting OKLCH to HEX:", e);
      }
    }

    // Update OKLCH values from hex/RGB using color-space
    updateOklchFromHex() {
      try {
        const hex = this.inputHex.value.trim();

        // Parse hex to RGB
        let rgbValues;
        if (hex.startsWith("#")) {
          rgbValues = this.hexToRgb(hex);
        } else if (hex.startsWith("rgb")) {
          const match = hex.match(/rgba?\((\d+),\s*(\d+),\s*(\d+)/i);
          if (match) {
            rgbValues = [
              parseInt(match[1]),
              parseInt(match[2]),
              parseInt(match[3]),
            ];
          } else {
            throw new Error("Invalid RGB format");
          }
        } else {
          rgbValues = this.hexToRgb("#" + hex);
        }

        const lchValues =
          space.rgb && space.rgb.lchab
            ? space.rgb.lchab(rgbValues as [number, number, number])
            : [0, 0, 0];

        // Scale values to OKLCH ranges: L is 0-1, C is 0-0.37 (instead of 0-100)
        this.l = lchValues[0] / 100;
        this.c = lchValues[1] / 100;
        this.h = lchValues[2];

        // Ensure values are in proper ranges
        this.l = Math.max(0, Math.min(1, this.l));
        this.c = Math.max(0, Math.min(0.37, this.c));
        this.h = (this.h + 360) % 360;

        // Update UI with the new values
        this.updateUI();

        // Update OKLCH input field
        this.inputOklch.value = `oklch(${this.l.toFixed(2)} ${this.c.toFixed(4)} ${this.h.toFixed(2)})`;
      } catch (e) {
        console.error("Error converting HEX to OKLCH:", e);
      }
    }

    // Add a method to update the original swatch
    updateOriginalSwatch(color: string) {
      this.originalColor = color;
      this.originalSwatch.style.backgroundColor = color;
    }

    // When the parent component opens the picker, make the "Original" swatch
    // reflect the parent component's current color
    handleVisibilityChange() {
      // Check if the picker is now visible
      const rect = this.container.getBoundingClientRect();
      if (rect.height > 0) {
        // Find the parent color-picker-field
        const parentField = this.container.closest(".color-picker-field");
        if (parentField) {
          const parentSwatch = parentField.querySelector(
            "[data-swatch]"
          ) as HTMLElement;
          if (parentSwatch) {
            this.updateOriginalSwatch(parentSwatch.style.backgroundColor);

            // Also update the preview swatch and OKLCH values to match the original color
            this.previewSwatch.style.backgroundColor =
              parentSwatch.style.backgroundColor;
            this.parseInitialColor();
            this.updateUI();
          }
        }
      }
    }

    setupEventListeners() {
      // Bind event handlers
      // this.handleMouseMove = this.handleMouseMove.bind(this);
      // this.handleMouseUp = this.handleMouseUp.bind(this);

      // Input field change events
      this.inputOklch.addEventListener("change", () => {
        this.parseInitialColor();
        this.updateUI();
      });

      this.inputHex.addEventListener("change", () => {
        this.updateOklchFromHex();
      });

      // Direct value input events
      this.inputHValue.addEventListener("change", () => {
        const val = parseFloat(this.inputHValue.value);
        if (!isNaN(val) && val >= 0 && val <= 360) {
          this.h = val;
          this.updateColor();
        }
      });

      this.inputLValue.addEventListener("change", () => {
        const val = parseFloat(this.inputLValue.value);
        if (!isNaN(val) && val >= 0 && val <= 1) {
          this.l = val;
          this.updateColor();
        }
      });

      this.inputCValue.addEventListener("change", () => {
        const val = parseFloat(this.inputCValue.value);
        if (!isNaN(val) && val >= 0 && val <= 0.37) {
          this.c = val;
          this.updateColor();
        }
      });

      // Slider mousedown events
      this.hueSlider.addEventListener("mousedown", (e: MouseEvent) => {
        this.isDragging = true;
        this.dragTarget = "hue";
        this.handleHueSliderChange(e);
        document.addEventListener("mousemove", this.handleMouseMove);
        document.addEventListener("mouseup", this.handleMouseUp);
      });

      this.lightnessSlider.addEventListener("mousedown", (e: MouseEvent) => {
        this.isDragging = true;
        this.dragTarget = "lightness";
        this.handleLightnessSliderChange(e);
        document.addEventListener("mousemove", this.handleMouseMove);
        document.addEventListener("mouseup", this.handleMouseUp);
      });

      this.chromaSlider.addEventListener("mousedown", (e: MouseEvent) => {
        this.isDragging = true;
        this.dragTarget = "chroma";
        this.handleChromaSliderChange(e);
        document.addEventListener("mousemove", this.handleMouseMove);
        document.addEventListener("mouseup", this.handleMouseUp);
      });

      // Apply button
      this.applyButton.addEventListener("click", () => {
        const event = new CustomEvent("colorSelected", {
          bubbles: true,
          detail: {
            color: `oklch(${this.l.toFixed(2)} ${this.c.toFixed(4)} ${this.h.toFixed(2)})`,
            id: this.id,
          },
        });
        this.container.dispatchEvent(event);
      });

      document.addEventListener("colorSelected", (e: Event) => {
        const customEvent = e as CustomEvent<{ color: string; id: string }>;
        if (customEvent.detail.id === this.id && e.target !== this.container) {
          const color = customEvent.detail.color;
          try {
            // Handle both OKLCH and hex/rgb inputs
            if (color.startsWith("oklch")) {
              this.inputOklch.value = color;
              this.parseInitialColor();
            } else {
              this.inputHex.value = color;
              this.updateOklchFromHex();
            }

            // Update the original swatch to match the current swatch color
            this.originalColor = color;
            this.originalSwatch.style.backgroundColor = color;
          } catch (err) {
            console.error("Error processing color:", err);
          }
        }
      });

      // Create a MutationObserver to detect when the picker becomes visible
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (
            mutation.type === "attributes" &&
            mutation.attributeName === "style" &&
            (mutation.target as HTMLElement).closest(".color-picker-accordion")
          ) {
            this.handleVisibilityChange();
          }
        });
      });

      // Find the accordion element
      const accordion = this.container.closest(".color-picker-accordion");
      if (accordion) {
        observer.observe(accordion, { attributes: true });
      }
    }

    handleMouseMove(e: MouseEvent) {
      if (!this.isDragging) return;

      switch (this.dragTarget) {
        case "hue":
          this.handleHueSliderChange(e);
          break;
        case "lightness":
          this.handleLightnessSliderChange(e);
          break;
        case "chroma":
          this.handleChromaSliderChange(e);
          break;
      }

      e.preventDefault();
    }

    handleMouseUp() {
      this.isDragging = false;
      this.dragTarget = null;
      document.removeEventListener("mousemove", this.handleMouseMove);
      document.removeEventListener("mouseup", this.handleMouseUp);
    }

    handleHueSliderChange(e: MouseEvent) {
      const rect = this.hueSlider.getBoundingClientRect();
      const y = Math.max(0, Math.min(rect.height, e.clientY - rect.top));
      this.h = 360 - (y / rect.height) * 360;
      this.updateColor();
    }

    handleLightnessSliderChange(e: MouseEvent) {
      const rect = this.lightnessSlider.getBoundingClientRect();
      const y = Math.max(0, Math.min(rect.height, e.clientY - rect.top));
      this.l = 1 - y / rect.height;
      this.updateColor();
    }

    handleChromaSliderChange(e: MouseEvent) {
      const rect = this.chromaSlider.getBoundingClientRect();
      const y = Math.max(0, Math.min(rect.height, e.clientY - rect.top));
      this.c = 0.37 * (1 - y / rect.height);
      this.updateColor();
    }

    updateColor() {
      // Ensure values are in range
      this.l = Math.max(0, Math.min(1, this.l));
      this.c = Math.max(0, Math.min(0.37, this.c));
      this.h = Math.max(0, Math.min(360, this.h));

      // Update UI
      this.updateUI();

      // Update color string
      const oklchStr = `oklch(${this.l.toFixed(2)} ${this.c.toFixed(4)} ${this.h.toFixed(2)})`;
      this.inputOklch.value = oklchStr;

      // Update hex
      this.updateHexFromOklch();

      // Update preview swatch with the new color
      const colorStr = `oklch(${this.l.toFixed(2)} ${this.c.toFixed(4)} ${this.h.toFixed(2)})`;
      this.previewSwatch.style.backgroundColor = colorStr;
    }

    updateUI() {
      // Update text inputs
      this.inputHValue.value = Math.round(this.h).toString();
      this.inputLValue.value = this.l.toFixed(2);
      this.inputCValue.value = this.c.toFixed(3);

      // Update slider positions
      const huePosition = ((360 - this.h) / 360) * 100;
      const lightnessPosition = (1 - this.l) * 100;
      const chromaPosition = (1 - this.c / 0.37) * 100;

      this.hueIndicator.style.top = `${huePosition}%`;
      this.lightnessIndicator.style.top = `${lightnessPosition}%`;
      this.chromaIndicator.style.top = `${chromaPosition}%`;

      // Update slider backgrounds to reflect current values
      this.updateSliderBackgrounds();

      // Update preview swatch
      const colorStr = `oklch(${this.l.toFixed(2)} ${this.c.toFixed(4)} ${this.h.toFixed(2)})`;
      this.previewSwatch.style.backgroundColor = colorStr;
    }

    updateSliderBackgrounds() {
      // Update hue slider background (show current lightness and chroma with varying hue)
      let hueGradient = "";
      for (let h = 0; h <= 360; h += 20) {
        const percent = (h / 360) * 100;
        hueGradient += `oklch(${this.l} ${this.c} ${h}) ${percent}%${
          h < 360 ? ", " : ""
        }`;
      }

      this.hueSlider.style.background = `linear-gradient(to top, ${hueGradient})`;

      // Update lightness slider background (show current hue and chroma with varying lightness)
      this.lightnessSlider.style.background = `linear-gradient(to top, 
        oklch(0 ${this.c} ${this.h}), 
        oklch(0.2 ${this.c} ${this.h}), 
        oklch(0.4 ${this.c} ${this.h}), 
        oklch(0.6 ${this.c} ${this.h}), 
        oklch(0.8 ${this.c} ${this.h}), 
        oklch(1 ${this.c} ${this.h})
      )`;

      // Update chroma slider background (show current hue and lightness with varying chroma)
      this.chromaSlider.style.background = `linear-gradient(to bottom, 
        oklch(${this.l} 0.37 ${this.h}), 
        oklch(${this.l} 0.3 ${this.h}), 
        oklch(${this.l} 0.2 ${this.h}), 
        oklch(${this.l} 0.1 ${this.h}), 
        oklch(${this.l} 0.05 ${this.h}), 
        oklch(${this.l} 0 ${this.h})
      )`;
    }
  }

  // Initialize all pickers on the page
  document.addEventListener("DOMContentLoaded", () => {
    document.querySelectorAll(".oklch-picker").forEach((el: Element) => {
      new OklchPicker(el as HTMLElement);
    });
  });
</script>

<style>
  .oklch-picker {
    --picker-width: 100%;
    width: var(--picker-width);
  }

  /* Sliders styling */
  .hue-slider,
  .lightness-slider,
  .chroma-slider {
    box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.2) inset;
    border-radius: 4px;
  }

  .hue-indicator,
  .lightness-indicator,
  .chroma-indicator {
    box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.3);
  }

  /* Make sliders wider for better visibility */
  .sliders-container {
    max-width: 400px;
    margin: 0 auto;
  }

  .slider-container {
    width: 33%;
  }
</style>

---
import OklchPicker from "./OklchPicker.astro";

interface Props {
  id: string;
  color: string;
  label?: string;
  name?: string;
}

const { id, color, label, name } = Astro.props;
---

<div class="color-picker-field" data-field-id={id}>
  <!-- <label class="block text-sm font-medium mb-2 text-zinc-300">{label}</label> -->
  <div class="flex items-center space-x-4">
    <!-- Color swatch -->
    <div
      class="size-10 rounded border border-zinc-600 color-swatch"
      cursor-pointer
      style={`background-color: ${color};`}
      data-swatch
    >
    </div>

    <!-- Hidden actual input for form submission -->
    <input type="hidden" value={color} name={name} data-hidden-color />

    <!-- Color value input -->
    <input
      type="text"
      class="rounded px-4 py-2 bg-zinc-800 text-zinc-300 flex-grow color-value-input"
      value={color}
      data-color-input={id}
      name={name}
    />
  </div>

  <!-- Color picker accordion -->
  <div
    class="color-picker-accordion overflow-hidden transition-all max-h-0 mt-2"
    data-picker-accordion
  >
    <div class="pt-2 pb-3">
      <OklchPicker id={id} color={color} />
    </div>
  </div>
</div>

<script>
  class ColorPickerField {
    container: HTMLElement;
    id: string;
    swatch: HTMLDivElement;
    colorInput: HTMLInputElement;
    hiddenInput: HTMLInputElement;
    accordion: HTMLDivElement;
    isOpen: boolean;

    constructor(element: HTMLElement) {
      this.container = element;
      this.id = element.dataset.fieldId!;
      this.swatch = element.querySelector("[data-swatch]") as HTMLDivElement;
      this.colorInput = element.querySelector(
        ".color-value-input"
      ) as HTMLInputElement;
      this.hiddenInput = element.querySelector(
        "[data-hidden-color]"
      ) as HTMLInputElement;
      this.accordion = element.querySelector(
        "[data-picker-accordion]"
      ) as HTMLDivElement;
      this.isOpen = false;

      this.setupEventListeners();
    }

    setupEventListeners() {
      // Open picker on swatch click
      this.swatch.addEventListener("click", () => {
        this.toggleAccordion();
      });

      // Listen for color input changes (hex or rgb to OKLCH)
      this.colorInput.addEventListener("change", () => {
        const typedColor = this.colorInput.value.trim();
        this.handleColorChange(typedColor);
      });

      // Listen for selected color from picker
      this.container.addEventListener("colorSelected", (e: Event) => {
        const customEvent = e as CustomEvent<{ color: string; id: string }>;
        if (customEvent.detail.id === this.id) {
          this.hiddenInput.value = customEvent.detail.color;
          this.colorInput.value = customEvent.detail.color;
          this.updateSwatch(customEvent.detail.color);

          // Also notify any shade managers that primary color has changed
          document.dispatchEvent(
            new CustomEvent("colorSelected", {
              detail: customEvent.detail,
              bubbles: true, // Ensure it bubbles up
              composed: true, // Ensure it crosses shadow DOM boundaries if any
            })
          );

          this.closeAccordion();
        }
      });
    }

    handleColorChange(value: string) {
      // Naive parse: set the hidden input, update swatch, dispatch event
      try {
        // Attempt to let browser parse color
        const temp = document.createElement("div");
        temp.style.color = value;
        if (!temp.style.color) throw new Error("Invalid color");
        this.hiddenInput.value = value;
        this.swatch.style.backgroundColor = value;

        // Dispatch colorSelected to let OklchPicker handle conversion
        const event = new CustomEvent("colorSelected", {
          bubbles: true,
          composed: true, // Ensure it crosses shadow DOM boundaries if any
          detail: { color: value, id: this.id },
        });
        this.container.dispatchEvent(event);
      } catch {
        console.error("Invalid color input:", value);
      }
    }

    toggleAccordion() {
      if (this.isOpen) {
        this.closeAccordion();
      } else {
        this.openAccordion();
      }
    }

    openAccordion() {
      // Close any other open accordions first
      document.querySelectorAll(".color-picker-field").forEach((field) => {
        if (field !== this.container) {
          const accordion = field.querySelector(
            "[data-picker-accordion]"
          ) as HTMLElement;
          if (accordion) {
            accordion.style.maxHeight = "0px";
          }
        }
      });

      // Open this accordion
      this.accordion.style.maxHeight = this.accordion.scrollHeight + "px";
      this.isOpen = true;

      // Update the original swatch color in the OklchPicker when opening
      const oklchPicker = this.container.querySelector(".oklch-picker");
      if (oklchPicker) {
        const originalSwatch = oklchPicker.querySelector(
          ".original-swatch"
        ) as HTMLElement;
        if (originalSwatch) {
          originalSwatch.style.backgroundColor =
            this.swatch.style.backgroundColor;
        }
      }
    }

    closeAccordion() {
      this.accordion.style.maxHeight = "0px";
      this.isOpen = false;
    }

    updateSwatch(color: string) {
      try {
        this.swatch.style.backgroundColor = color;
      } catch (e) {
        console.error("Invalid color value:", e);
      }
    }
  }

  // Initialize all color picker fields
  document.addEventListener("DOMContentLoaded", () => {
    document.querySelectorAll(".color-picker-field").forEach((el: Element) => {
      new ColorPickerField(el as HTMLElement);
    });
  });
</script>

<style>
  /* Transition for accordion */
  .color-picker-accordion {
    transition: max-height 0.3s ease-in-out;
  }

  /* Active state for configure button */
  [data-toggle-picker][aria-expanded="true"] {
    color: rgb(168, 85, 247); /* purple-500 */
  }
</style>

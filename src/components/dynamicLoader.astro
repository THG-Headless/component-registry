---
// Define component props interface
export interface Props {
  path: string;
}

// Get the component path from props
const { path } = Astro.props;

// Determine the file extension to handle it appropriately
const isReactComponent = path.endsWith(".tsx");
const isAstroComponent = path.endsWith(".astro");

// Error state
let error = null;

// Component content placeholder
let ComponentModule;

try {
  if (isReactComponent) {
    // For React components, we'll import the module and use it directly in the template
    ComponentModule = await import(`../../${path}`);
  } else if (isAstroComponent) {
    // For Astro components, import the module
    ComponentModule = await import(`../../${path}`);
  } else {
    error = `Unsupported file type: ${path}. Only .tsx and .astro files are supported.`;
  }
} catch (e) {
  error = `Error loading component: ${e.message}`;
  console.error("Failed to load component:", e);
}
---

{
  error && (
    <div class="error-message p-4 bg-red-100 text-red-700 rounded">{error}</div>
  )
}

{
  !error && isReactComponent && ComponentModule && (
    <div>
      {(() => {
        const Component =
          ComponentModule.default || Object.values(ComponentModule)[0];
        if (Component) {
          return <Component client:load />;
        }
        return (
          <div class="p-4 bg-yellow-100 text-yellow-700 rounded">
            Component not found in module
          </div>
        );
      })()}
    </div>
  )
}

{
  !error && isAstroComponent && ComponentModule && (
    <div>
      {(() => {
        const AstroComponent = ComponentModule.default;
        if (AstroComponent) {
          return <AstroComponent />;
        }
        return (
          <div class="p-4 bg-yellow-100 text-yellow-700 rounded">
            Component not found in module
          </div>
        );
      })()}
    </div>
  )
}

{
  !error && !ComponentModule && (
    <div class="p-4 bg-yellow-100 text-yellow-700 rounded">
      No component could be loaded from path: {path}
    </div>
  )
}

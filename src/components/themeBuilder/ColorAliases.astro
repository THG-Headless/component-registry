---
interface Props {
  colorName: string;
  aliases: Record<string, string | any>; // Updated to be more flexible
  shades: string[];
}

const { colorName, aliases, shades } = Astro.props;
const shadeNumbers = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950];
---

<div class="">
  <button
    class="flex items-center text-sm font-medium text-zinc-300 w-full"
    data-toggle-aliases={colorName}
  >
    <span class="mr-auto">Aliases</span>
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="16"
      height="16"
      fill="currentColor"
      viewBox="0 0 16 16"
      class="transform transition-transform data-[expanded=true]:rotate-180"
      data-toggle-icon
    >
      <path
        fill-rule="evenodd"
        d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"
      ></path>
    </svg>
  </button>

  <div
    class="overflow-hidden transition-all max-h-0 pl-2 border-l-2 border-zinc-700"
    data-aliases-section={colorName}
  >
    {
      Object.entries(aliases).map(([alias, selectedShade]) => (
        <div class="mb-4">
          <label class="block text-sm font-medium my-2 text-zinc-400 capitalize">
            {alias.replace(/_/g, " ")}
          </label>

          <div class="w-full grid grid-cols-11 gap-2 pr-2">
            {shadeNumbers.map((shade) => (
              <button
                class="aspect-square rounded border transition-all duration-150 shade-alias-swatch data-[selected=true]:scale-120 data-[selected=true]:border-2 data-[selected=true]:border-purple-500 data-[selected=false]:scale-90 data-[selected=false]:border-zinc-600 hover:border-purple-400"
                data-shade={shade}
                data-selected={shade.toString() === selectedShade.toString()}
                data-alias={`${colorName}.${alias}`}
                data-alias-swatch
              />
            ))}
          </div>

          <div class="flex justify-between items-center mt-2">
            <span class="text-xs text-zinc-500">Current: {selectedShade}</span>
          </div>
        </div>
      ))
    }
  </div>
</div>

<script>
  import { setupToggleSection } from "./utils/toggleLogic";

  function updateAliasSwatch(swatch: HTMLElement) {
    const colorName = swatch.dataset.alias?.split(".")[0];
    const shade = swatch.dataset.shade;

    if (colorName && shade) {
      // Find the corresponding color swatch
      const colorSwatch = document.querySelector(
        `[data-shade-swatch="${colorName}-${shade}"]`
      );

      if (colorSwatch) {
        // Set the background color directly from the element's style
        const bgColor = (colorSwatch as HTMLElement).style.backgroundColor;
        swatch.style.backgroundColor = bgColor;
      }
    }
  }

  function updateAllAliasSwatches() {
    document.querySelectorAll("[data-alias-swatch]").forEach((swatch) => {
      updateAliasSwatch(swatch as HTMLElement);
    });
  }

  // Expose the function globally
  (window as any).updateAllAliasSwatches = updateAllAliasSwatches;

  document.addEventListener("DOMContentLoaded", () => {
    // Set up toggle functionality for alias section
    document.querySelectorAll("[data-toggle-aliases]").forEach((toggle) => {
      setupToggleSection(
        toggle as HTMLElement,
        (colorName) =>
          document.querySelector(
            `[data-aliases-section="${colorName}"]`
          ) as HTMLElement
      );
    });

    // Wait a moment to ensure shades have been initialized
    setTimeout(() => {
      updateAllAliasSwatches();
    }, 100);

    // Add click handlers for shade swatches
    document.querySelectorAll("[data-alias-swatch]").forEach((swatch) => {
      swatch.addEventListener("click", (e) => {
        const target = e.currentTarget as HTMLElement;
        const aliasPath = target.dataset.alias;
        const shade = target.dataset.shade;

        if (!aliasPath || !shade) return;

        // Get color name and alias name
        const [colorName, aliasName] = aliasPath.split(".");

        // Update the selected state for all swatches in this alias row
        document
          .querySelectorAll(`[data-alias="${aliasPath}"]`)
          .forEach((s) => {
            s.setAttribute("data-selected", "false");
          });

        // Set this swatch as selected
        target.setAttribute("data-selected", "true");

        // Update the "Current: X" text
        const row = target.closest(".mb-4");
        if (row) {
          const currentText = row.querySelector(".text-xs");
          if (currentText) {
            currentText.textContent = `Current: ${shade}`;
          }
        }

        // Dispatch an event to notify of the change
        document.dispatchEvent(
          new CustomEvent("aliasChanged", {
            detail: {
              colorName,
              aliasName,
              value: shade,
            },
          })
        );
      });
    });
  });

  // Listen for color shade updates and refresh alias swatches
  document.addEventListener("shadesUpdated", (e: Event) => {
    const customEvent = e as CustomEvent<{ colorName: string }>;
    // Update all alias swatches for the updated color
    document
      .querySelectorAll(`[data-alias^="${customEvent.detail.colorName}."]`)
      .forEach((swatch) => {
        updateAliasSwatch(swatch as HTMLElement);
      });
  });
</script>

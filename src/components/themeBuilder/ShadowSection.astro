---
import { parseShadow, splitShadows } from "./utils/shadowUtils";
import ShadowPreview from "./ShadowPreview.astro";
import ShadowLayer from "./ShadowLayer.astro";

interface Props {
  shadow: string;
}

const { shadow } = Astro.props;

// Parse the shadow string into components
const shadowParts = splitShadows(shadow);
const parsedShadows = shadowParts.map((s) => parseShadow(s));

// Create a default shadow for the template
const defaultShadow = {
  horizontalOffset: 2,
  verticalOffset: 4,
  blurRadius: 6,
  spreadRadius: 0,
  color: "rgba(0, 0, 0, 0.1)",
  opacity: 0.1,
  colorName: "black",
  isInset: false,
};
---

<div class="tab-content hidden" data-tab-content="shadow">
  <h2 id="shadow" class="text-xl font-bold mb-4 text-zinc-100 pt-2">
    Box Shadow
  </h2>

  <!-- Shadow Preview at the top -->
  <ShadowPreview shadow={shadow} />

  <div class="mb-8" data-shadows-container>
    <!-- Add button for new shadow -->
    <div class="flex justify-between items-center mb-4">
      <h3 class="text-lg font-semibold text-zinc-200">Shadow Layers</h3>
      <button
        type="button"
        class="bg-purple-600 hover:bg-purple-700 text-white py-1 px-3 rounded text-sm"
        data-add-shadow
      >
        Add Shadow Layer
      </button>
    </div>

    <!-- Shadow layers container -->
    <div class="space-y-8" data-shadow-layers>
      {
        parsedShadows.map((parsedShadow, index) => (
          <ShadowLayer
            shadow={parsedShadow}
            index={index}
            showRemoveButton={true}
          />
        ))
      }
    </div>

    <div class="mt-6">
      <label class="block text-sm font-medium mb-2 text-zinc-300">
        Complete Shadow Value
      </label>
      <textarea
        class="border border-zinc-700 rounded px-2 py-1 w-full h-20 mb-3 bg-zinc-800 text-zinc-300"
        data-shadow-field
        readonly>{shadow}</textarea
      >
    </div>
  </div>

  <!-- Hidden template for new shadow layers -->
  <template id="shadow-layer-template">
    <ShadowLayer shadow={defaultShadow} index={999} showRemoveButton={true} />
  </template>
</div>

<style>
  /* Custom styling for range inputs to use purple accent */
  input[type="range"] {
    -webkit-appearance: none;
    height: 8px;
    background: #374151; /* zinc-700 */
    border-radius: 4px;
    background-image: linear-gradient(#a855f7, #a855f7); /* purple-500 */
    background-repeat: no-repeat;
  }

  /* Thumb styles */
  input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none;
    height: 16px;
    width: 16px;
    border-radius: 50%;
    background: #a855f7; /* purple-500 */
    cursor: pointer;
    box-shadow: 0 0 2px 0 #555;
  }

  input[type="range"]::-moz-range-thumb {
    height: 16px;
    width: 16px;
    border-radius: 50%;
    background: #a855f7; /* purple-500 */
    cursor: pointer;
    border: none;
    box-shadow: 0 0 2px 0 #555;
  }

  input[type="range"]::-ms-thumb {
    height: 16px;
    width: 16px;
    border-radius: 50%;
    background: #a855f7; /* purple-500 */
    cursor: pointer;
    box-shadow: 0 0 2px 0 #555;
  }

  /* Track styles */
  input[type="range"]::-webkit-slider-runnable-track {
    -webkit-appearance: none;
    box-shadow: none;
    border: none;
    background: transparent;
  }

  input[type="range"]::-moz-range-track {
    box-shadow: none;
    border: none;
    background: transparent;
  }

  input[type="range"]:focus {
    outline: none;
  }

  /* Update the fill as the slider moves */
  input[type="range"] {
    background-size: 50% 100%;
  }

  /* Override checkbox styles for purple theme */
  .form-checkbox:checked {
    background-color: #a855f7 !important; /* purple-500 */
    border-color: #a855f7 !important; /* purple-500 */
  }

  .form-checkbox:focus {
    box-shadow: 0 0 0 3px rgba(168, 85, 247, 0.35) !important; /* purple-500 with opacity */
  }

  /* Fix for dynamically created checkboxes */
  input[type="checkbox"].shadow-inset:checked {
    background-color: #a855f7 !important;
    border-color: #a855f7 !important;
  }
</style>

<script>
  import {
    setupShadowLayerToggles,
    setupShadowVisibilityToggles,
    setupRangeSliders,
  } from "./utils/shadowLayerControls";
  import {
    setupAddRemoveShadowButtons,
    setupColorOpacityInteraction,
    rebuildShadowFromInput,
  } from "./utils/shadowManagement";
  import { setupShadowPreviewUpdates } from "./utils/shadowPreview";

  // Flag to prevent initial UI setup from overwriting stored values
  let initialLoadComplete = false;

  document.addEventListener("DOMContentLoaded", () => {
    // Add rebuildShadowFromInput to the window object directly
    (window as any).rebuildShadowFromInput = rebuildShadowFromInput;

    // Step 1: Set up shadow preview updates first to establish the global updateShadowPreview function
    setupShadowPreviewUpdates();

    // Step 2: Setup UI controls
    setupShadowLayerToggles();
    setupShadowVisibilityToggles();
    setupAddRemoveShadowButtons();

    // Step 3: Initialize existing shadow layers
    document.querySelectorAll(".shadow-layer").forEach((layer) => {
      setupRangeSliders(layer);
      setupColorOpacityInteraction(layer);
    });

    // Get the shadow field element
    const shadowField = document.querySelector(
      "[data-shadow-field]"
    ) as HTMLTextAreaElement;

    if (shadowField) {
      // Listen for changes to the shadow field
      shadowField.addEventListener(
        "input",
        debounce(function () {
          const value = shadowField.value.trim();

          // Update the preview immediately
          const shadowPreview = document.querySelector(
            ".shadow-preview"
          ) as HTMLElement;
          if (shadowPreview) {
            shadowPreview.style.boxShadow = value;
          }
        }, 100)
      );

      // Handle when user finishes editing
      shadowField.addEventListener("change", function () {
        const value = shadowField.value.trim();

        // Update the preview
        const shadowPreview = document.querySelector(
          ".shadow-preview"
        ) as HTMLElement;
        if (shadowPreview) {
          shadowPreview.style.boxShadow = value;
        }

        // Update the shadow layers UI
        if (typeof (window as any).rebuildShadowFromInput === "function") {
          (window as any).rebuildShadowFromInput(value);
        } else {
          console.error("rebuildShadowFromInput function not found");
        }

        // Save to local storage
        document.dispatchEvent(
          new CustomEvent("shadowChanged", {
            detail: { value },
            bubbles: true,
          })
        );
      });

      // Make it editable
      shadowField.removeAttribute("readonly");
    }

    // Mark initialization as complete to prevent overwriting stored values
    initialLoadComplete = true;

    // No need to force update shadow preview on initial load
    // This was causing the default shadow to overwrite stored settings
    // The synchronizeUIWithStyles function in styleManager.ts will handle this
  });

  // Simple debounce function for the shadow field input
  function debounce(func: Function, wait = 100) {
    let timeout: number | undefined;
    return function (this: unknown, ...args: any[]) {
      clearTimeout(timeout);
      timeout = setTimeout(
        () => func.apply(this, args),
        wait
      ) as unknown as number;
    };
  }
</script>

---
interface Props {
  animation: Record<string, number>;
}

const { animation } = Astro.props;
---

<div class="tab-content hidden" data-tab-content="animation">
  <h2 id="animation-timing" class="text-xl font-bold mb-4 text-zinc-100 pt-2">
    Animation Timing
  </h2>

  <div class="mb-6 border border-zinc-700 rounded p-5 bg-zinc-800">
    <div class="flex">
      <!-- Left side: Vertical slider with tick marks -->
      <div class="w-16 relative">
        <!-- Vertical line -->
        <div class="absolute h-[400px] w-[2px] bg-zinc-700 left-4 rounded-full">
        </div>

        <!-- Tick marks at 50ms increments (0-500ms) -->
        {
          Array.from({ length: 11 }).map((_, i) => (
            <div class="relative">
              <div
                class={`absolute w-4 h-[2px] bg-zinc-600 left-4`}
                style={`top: ${i * 40}px;`}
              />
              <div
                class="absolute -left-6 text-xs text-zinc-400 text-right w-8"
                style={`top: ${i * 40 - 6}px;`}
              >
                {((10 - i) * 50) / 1000}s
              </div>
            </div>
          ))
        }
      </div>

      <!-- Right side: Animation timing handles -->
      <div id="animation-slider" class="flex-1 relative h-[400px]">
        {
          Object.entries(animation)
            .sort((a, b) => b[1] - a[1])
            .map(([name, value]) => {
              const isNone = name.toLowerCase() === "none";
              const valueInSeconds = value || 0;
              const topPosition = ((500 - valueInSeconds * 1000) / 500) * 400;

              return (
                <div
                  class={`absolute left-0 right-4 ${isNone ? "" : "cursor-pointer"} select-none -translate-y-1/2`}
                  style={`top: ${topPosition}px;`}
                  data-animation-name={name}
                  data-animation-value={valueInSeconds}
                  data-immutable={isNone ? "true" : "false"}
                >
                  <div class="flex items-center">
                    <div
                      class={`h-6 w-6 rounded-full border-2 ${
                        isNone ? "border-gray-500" : "border-purple-500"
                      } bg-zinc-800 flex items-center justify-center mr-3 shadow-md animation-handle`}
                      data-handle-for={name}
                    >
                      <div
                        class={`h-2 w-2 rounded-full ${isNone ? "bg-gray-500" : "bg-purple-500"} handle-dot`}
                      />
                    </div>
                    <span class="text-zinc-200">
                      {name} ({valueInSeconds}s)
                    </span>
                  </div>
                </div>
              );
            })
        }

        <!-- Hidden inputs for form submission -->
        {
          Object.entries(animation).map(([name, value]) => (
            <input
              type="hidden"
              name={`animation.${name}`}
              value={value}
              data-animation-input={name}
            />
          ))
        }
      </div>
    </div>
  </div>
</div>

<style>
  /* Base animation container - specific keyframes will be added dynamically */
  .pulsing {
    animation-iteration-count: infinite;
    animation-duration: 1s; /* Fixed 1s cycle */
    animation-timing-function: linear;
  }
</style>

<script>
  function setupAnimationSlider() {
    const sliderContainer = document.getElementById("animation-slider");
    if (!sliderContainer) return;

    const animationHandles = document.querySelectorAll<HTMLElement>(
      "[data-animation-name]"
    );
    let activeHandle: HTMLElement | null = null;
    let startY = 0;
    let startTop = 0;
    const containerHeight = 400;
    const maxAnimationTime = 0.5; // 0.5 second (500ms)

    // Store the original order and values
    const animationsOrder = Array.from(animationHandles)
      .map((handle) => {
        const name = handle.dataset.animationName || "";
        const value = parseFloat(handle.dataset.animationValue || "0");
        return { name, value, element: handle };
      })
      .sort((a, b) => b.value - a.value);

    // Make handles draggable (except immutable ones)
    animationHandles.forEach((handle) => {
      if (handle.dataset.immutable !== "true") {
        handle.addEventListener("mousedown", (e) => startDrag(e, handle));
        handle.addEventListener("touchstart", (e) => startDrag(e, handle), {
          passive: false,
        });
      }
    });

    // Setup pulsing animations for handles with 1s cycles
    function setupPulsingAnimations() {
      // Create a stylesheet for our dynamic animations
      const styleSheet = document.createElement("style");
      document.head.appendChild(styleSheet);

      document
        .querySelectorAll<HTMLElement>(".animation-handle")
        .forEach((handle, index) => {
          const name = handle.dataset.handleFor;
          if (!name) return;

          // Skip "none" animation handles which should never pulse
          if (name.toLowerCase() === "none") return;

          // Get the timing value from the corresponding handle
          const container = document.querySelector(
            `[data-animation-name="${name}"]`
          ) as HTMLElement;
          if (!container || !container.dataset.animationValue) return;
          const duration = parseFloat(container.dataset.animationValue);
          if (duration === 0) return; // Skip if duration is 0

          // Calculate keyframe percentages for a 1s cycle
          // duration value will be split between expand and shrink phases
          const expandDuration = duration / 2; // half for expanding
          const shrinkDuration = duration / 2; // half for shrinking

          // Calculate percentages for the keyframes
          const expandEnd = (expandDuration * 100).toFixed(1); // End of expand phase
          const holdEnd = "50"; // Middle point where shrinking begins
          const shrinkEnd = (50 + shrinkDuration * 100).toFixed(1); // End of shrink phase

          // Create a unique animation name for this handle
          const animationName = `pulse-${name.replace(/\s+/g, "-")}-${index}`;

          // Create keyframes for this specific timing
          const keyframes = `
            @keyframes ${animationName} {
              0% { transform: scale(1); }
              ${expandEnd}% { transform: scale(1.5); }
              ${holdEnd}% { transform: scale(1.5); }
              ${shrinkEnd}% { transform: scale(1); }
              100% { transform: scale(1); }
            }
          `;

          // Add the keyframes to our stylesheet
          styleSheet.sheet?.insertRule(
            keyframes,
            styleSheet.sheet.cssRules.length
          );

          // Find the handle dot to animate
          const dot = handle.querySelector(".handle-dot");
          if (!dot) return;

          // Apply the custom animation
          dot.classList.add("pulsing");
          (dot as HTMLElement).style.animationName = animationName;
        });
    }

    function startDrag(e: MouseEvent | TouchEvent, element: HTMLElement) {
      if (element.dataset.immutable === "true") return;

      e.preventDefault();
      activeHandle = element;

      // Get starting position
      if (e instanceof MouseEvent) {
        startY = e.clientY;
      } else {
        startY = e.touches[0].clientY;
      }

      startTop = parseInt(window.getComputedStyle(activeHandle).top);

      // Add event listeners for drag and end
      document.addEventListener("mousemove", dragHandle);
      document.addEventListener("touchmove", dragHandle, { passive: false });
      document.addEventListener("mouseup", stopDrag);
      document.addEventListener("touchend", stopDrag);

      // Add active style
      activeHandle
        .querySelector(".animation-handle")
        ?.classList.add("ring-2", "ring-purple-300");
    }

    function dragHandle(e: MouseEvent | TouchEvent) {
      if (!activeHandle) return;

      let currentY;
      if (e instanceof MouseEvent) {
        currentY = e.clientY;
      } else {
        currentY = e.touches[0].clientY;
      }

      const deltaY = currentY - startY;
      let newTop = Math.max(0, Math.min(containerHeight, startTop + deltaY));

      // Calculate new animation value (0-0.5s range) with 0.05s steps
      let newValue =
        Math.round(
          ((containerHeight - newTop) / containerHeight) * maxAnimationTime * 20
        ) / 20;

      // Find the current index of this animation
      const handleName = activeHandle.dataset.animationName || "";
      const currentIndex = animationsOrder.findIndex(
        (item) => item.name === handleName
      );

      // Update position and value
      activeHandle.style.top = `${newTop}px`;
      activeHandle.dataset.animationValue = newValue.toString();

      // Update the visible value
      const label = activeHandle.querySelector("span");
      if (label) {
        label.textContent = `${handleName} (${newValue}s)`;
      }

      // Update the hidden input
      const input = document.querySelector<HTMLInputElement>(
        `[data-animation-input="${handleName}"]`
      );
      if (input) {
        input.value = newValue.toString();
      }

      // Update the order array
      animationsOrder[currentIndex].value = newValue;

      // Dispatch event
      document.dispatchEvent(
        new CustomEvent("animationTimingChanged", {
          detail: { name: handleName, value: newValue },
          bubbles: true,
        })
      );

      // Recreate the pulsing animations to reflect new timing
      // This is needed because we can't change the keyframes of an existing animation
      setupPulsingAnimations();
    }

    function stopDrag() {
      if (!activeHandle) return;

      // Remove active style
      activeHandle
        .querySelector(".animation-handle")
        ?.classList.remove("ring-2", "ring-purple-300");

      // Remove event listeners
      document.removeEventListener("mousemove", dragHandle);
      document.removeEventListener("touchmove", dragHandle);
      document.removeEventListener("mouseup", stopDrag);
      document.removeEventListener("touchend", stopDrag);

      activeHandle = null;
    }

    // Start pulsing animations after a short delay
    setTimeout(setupPulsingAnimations, 500);
  }

  document.addEventListener("DOMContentLoaded", () => {
    setupAnimationSlider();
  });
</script>

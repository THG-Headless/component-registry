{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "rating-input@react",
  "type": "registry:ui",
  "title": "Rating Input",
  "description": "Styled input for user rating selection",
  "dependencies": [
    "@thg-altitude/standalone-components-css"
  ],
  "files": [
    {
      "path": "registry/rating-input/rating-input.tsx",
      "content": "import React, { useState, useRef, useEffect } from \"react\";\nimport type {\n  InputHTMLAttributes,\n  ChangeEvent,\n  KeyboardEvent,\n  FocusEvent,\n} from \"react\";\n\ninterface RatingInputProps\n  extends Omit<\n    InputHTMLAttributes<HTMLInputElement>,\n    \"onChange\" | \"value\" | \"type\" | \"defaultValue\"\n  > {\n  label?: string;\n  helperText?: string;\n  errorMessage?: string;\n  isInvalid?: boolean;\n  numberOfOptions?: number;\n  defaultValue?: number | null;\n  value?: number | null;\n  onChange?: (value: number | null) => void;\n  className?: string;\n}\n\nexport const RatingInput: React.FC<RatingInputProps> = ({\n  id = \"rating-input\",\n  name = \"rating\",\n  label,\n  helperText,\n  errorMessage,\n  isInvalid = false,\n  disabled = false,\n  required,\n  numberOfOptions = 5,\n  defaultValue,\n  value,\n  className = \"\",\n  onChange,\n  ...restProps\n}) => {\n  const calculateDefaultValue = () => {\n    if (value !== undefined) return value;\n    if (defaultValue !== undefined) return defaultValue;\n    return null;\n  };\n\n  const [selectedRating, setSelectedRating] = useState<number | null>(\n    calculateDefaultValue()\n  );\n\n  useEffect(() => {\n    if (value !== undefined && value !== selectedRating) {\n      setSelectedRating(value);\n    }\n  }, [value]);\n\n  const radioGroupRef = useRef<HTMLDivElement>(null);\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const newValue = parseInt(e.target.value, 10);\n    setSelectedRating(newValue);\n    onChange && onChange(newValue);\n  };\n\n  const helperId = `${id}-helper`;\n  const messageId = `${id}-message`;\n\n  return (\n    <div\n      className={`skin-form input-wrapper  wrapper group ${className}`}\n      role=\"group\"\n      aria-roledescription=\"star rating\"\n    >\n      {label && (\n        <div className=\"input-label-wrapper\">\n          <label\n            className=\"input-label text-body font-semi-bold\"\n            id={`${id}-label`}\n            htmlFor={`${id}-1`}\n          >\n            {label}\n          </label>\n          {required && (\n            <span\n              className=\"input-status text-sm font-light soft\"\n              aria-hidden=\"true\"\n            >\n              Required\n            </span>\n          )}\n        </div>\n      )}\n\n      <div\n        className=\"rating-input skin-primary wrapper ml-2 [--rating-icon-size:32px]\"\n        ref={radioGroupRef}\n        role=\"radiogroup\"\n        aria-labelledby={label ? `${id}-label` : undefined}\n        aria-invalid={\n          isInvalid || (required && selectedRating === null) ? \"true\" : \"false\"\n        }\n        aria-describedby={helperId}\n        aria-errormessage={isInvalid ? messageId : undefined}\n      >\n        {Array.from({ length: numberOfOptions }, (_, index) => {\n          const ratingValue = index + 1;\n          const optionId = `${id}-${ratingValue}`;\n\n          return (\n            <input\n              key={optionId}\n              type=\"radio\"\n              id={optionId}\n              name={name}\n              value={ratingValue}\n              checked={selectedRating === ratingValue}\n              onChange={handleChange}\n              aria-label={`${ratingValue} ${\n                ratingValue === 1 ? \"star\" : \"stars\"\n              }`}\n              disabled={disabled}\n              required={required && selectedRating === null}\n              aria-invalid={\n                isInvalid || (required && selectedRating === null)\n                  ? \"true\"\n                  : \"false\"\n              }\n              aria-describedby={helperId}\n              aria-errormessage={messageId}\n              {...restProps}\n            />\n          );\n        })}\n      </div>\n\n      <div className=\"input-helper-wrapper\">\n        {!isInvalid && helperText && (\n          <p className=\"input-helper text-sm soft\" id={helperId}>\n            {helperText}\n          </p>\n        )}\n        {isInvalid && (\n          <div className=\"skin-error flex items-center space-x-1 py-3 px-2 mt-1 rounded-site\">\n            <svg\n              className=\"w-5 h-5 \"\n              viewBox=\"0 0 20 20\"\n              fill=\"currentColor\"\n              aria-hidden=\"true\"\n              focusable=\"false\"\n            >\n              <path\n                fillRule=\"evenodd\"\n                d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\"\n                clipRule=\"evenodd\"\n              />\n            </svg>\n            <p className=\" text-sm font-bold\" id={messageId} role=\"alert\">\n              {errorMessage}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default RatingInput;\n",
      "type": "registry:ui"
    }
  ],
  "meta": {
    "category": "input",
    "wcagCertification": null
  }
}
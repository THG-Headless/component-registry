---
import { styles } from "./utils/defaultTheme";
import SkinSwatchGrid from "./SkinSwatchGrid.astro";
import { getSkinFromStorage } from "./utils/skinStorage";

interface Props {
  skinName: string;
}

const { skinName } = Astro.props;

// Get skin data from default styles - we'll update from localStorage on client side
const skinData = styles.skins[skinName];

// Create unique ID for this configurator
const configId = `skin-config-${skinName}`;
---

<div class="skin-configurator mb-8" data-skin-name={skinName}>
  <!-- Collapsible header with dropdown icon - using basic styling initially -->
  <div
    class="flex items-center justify-between p-2 rounded cursor-pointer mb-2 border-2 transition-all theme-header"
    data-collapse-toggle={configId}
    data-skin-header={skinName}
  >
    <span class="font-medium header-text">Color Configuration</span>
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="w-5 h-5 transform transition-transform header-icon"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
      data-collapse-icon
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M19 9l-7 7-7-7"></path>
    </svg>
  </div>

  <!-- Collapsible content - hidden by default -->
  <div class="hidden transition-all" data-collapse-content={configId}>
    <SkinSwatchGrid skinName={skinName} skinData={skinData} />
  </div>

  <script define:vars={{ skinName, configId }}>
    document.addEventListener("DOMContentLoaded", () => {
      // Set up collapse functionality
      const toggleButton = document.querySelector(
        `[data-collapse-toggle="${configId}"]`
      );
      const contentSection = document.querySelector(
        `[data-collapse-content="${configId}"]`
      );
      const icon = toggleButton?.querySelector("[data-collapse-icon]");

      // Apply skin theme colors to the header
      function applyHeaderTheme() {
        if (!toggleButton) return;

        // Get current skin colors from storage
        let skinColors = {
          background: {
            default: "#ffffff",
            hover: "#f9fafb",
            focus: "#f9fafb",
            active: "#e5e7eb",
          },
          foreground: {
            default: "#000000",
            hover: "#374151",
            focus: "#374151",
            active: "#4b5563",
          },
          border: {
            default: "#000000",
            hover: "#d1d5db",
            focus: "#9ca3af",
            active: "#6b7280",
          },
        };

        try {
          // Try to get colors from window.currentStyles
          if (window.currentStyles?.skins?.[skinName]) {
            skinColors = window.currentStyles.skins[skinName];
          }
        } catch (e) {
          console.error("Error getting skin colors:", e);
        }

        // Apply default state styling - with direct resolution
        const bgColor = resolveColor(skinColors.background.default);
        const borderColor = resolveColor(skinColors.border.default);
        const textColor = resolveColor(skinColors.foreground.default);

        toggleButton.style.backgroundColor = bgColor;
        toggleButton.style.borderColor = borderColor;
        toggleButton.style.color = textColor;

        // Event listeners for states with direct resolution
        toggleButton.addEventListener("mouseover", () => {
          toggleButton.style.backgroundColor = resolveColor(
            skinColors.background.hover
          );
          toggleButton.style.borderColor = resolveColor(
            skinColors.border.hover
          );
          toggleButton.style.color = resolveColor(skinColors.foreground.hover);
        });

        toggleButton.addEventListener("mouseout", () => {
          toggleButton.style.backgroundColor = bgColor;
          toggleButton.style.borderColor = borderColor;
          toggleButton.style.color = textColor;
        });

        toggleButton.addEventListener("focus", () => {
          toggleButton.style.backgroundColor = resolveColor(
            skinColors.background.focus
          );
          toggleButton.style.borderColor = resolveColor(
            skinColors.border.focus
          );
          toggleButton.style.color = resolveColor(skinColors.foreground.focus);
        });

        toggleButton.addEventListener("mousedown", () => {
          toggleButton.style.backgroundColor = resolveColor(
            skinColors.background.active
          );
          toggleButton.style.borderColor = resolveColor(
            skinColors.border.active
          );
          toggleButton.style.color = resolveColor(skinColors.foreground.active);
        });

        toggleButton.addEventListener("mouseup", () => {
          toggleButton.style.backgroundColor = resolveColor(
            skinColors.background.hover
          );
          toggleButton.style.borderColor = resolveColor(
            skinColors.border.hover
          );
          toggleButton.style.color = resolveColor(skinColors.foreground.hover);
        });
      }

      // Directly resolve color value including OKLCH formulas
      function resolveColor(colorValue) {
        if (!colorValue) return "transparent";

        // If it's a direct color value (not a variable or formula)
        if (
          !colorValue.includes("var(") &&
          !colorValue.includes("oklch(from")
        ) {
          return colorValue;
        }

        // Handle var(--color-*) references
        if (colorValue.startsWith("var(--color-")) {
          return resolveVarReference(colorValue);
        }

        // Handle oklch(from var()) formulas
        if (colorValue.startsWith("oklch(from")) {
          return resolveOklchFormula(colorValue);
        }

        return colorValue;
      }

      // Resolve a CSS variable reference
      function resolveVarReference(varRef) {
        if (!window.currentStyles || !varRef.startsWith("var(--color-")) {
          return varRef;
        }

        try {
          // Parse var(--color-name-shade)
          const match = varRef.match(
            /var\(--color-([a-z]+)(?:-(\d+|[a-z_-]+))?\)/i
          );
          if (!match) return varRef;

          const [, colorName, shadeOrAlias] = match;

          // Simple colors
          if (colorName === "white") return "#ffffff";
          if (colorName === "black") return "#000000";

          // Get base color
          const baseColor = window.currentStyles?.colours?.site?.[colorName];
          if (!baseColor) return varRef;

          // No shade? Return base color
          if (!shadeOrAlias) return baseColor;

          // Handle numeric shades
          if (/^\d+$/.test(shadeOrAlias)) {
            // Base shade (500)
            if (shadeOrAlias === "500") return baseColor;

            // Find the shade value
            const shades = window.currentStyles?.colours?.shades?.[colorName];
            if (shades && shades[shadeOrAlias]) {
              const shadeValue = shades[shadeOrAlias];

              // If it's a formula, resolve it
              if (
                typeof shadeValue === "string" &&
                shadeValue.startsWith("oklch(from")
              ) {
                return resolveOklchFormula(shadeValue, baseColor);
              }

              return shadeValue;
            }

            // If no explicit shade defined, calculate algorithmically
            return calculateShade(baseColor, parseInt(shadeOrAlias));
          }

          // Handle alias names
          const aliasValue =
            window.currentStyles?.colours?.alias?.[colorName]?.[shadeOrAlias];
          if (aliasValue) {
            return resolveVarReference(
              `var(--color-${colorName}-${aliasValue})`
            );
          }

          return baseColor;
        } catch (e) {
          console.error("Error resolving variable:", e);
          return varRef;
        }
      }

      // Resolve an OKLCH formula
      function resolveOklchFormula(formula, baseColorOverride = null) {
        try {
          // Extract base color reference and transformations
          const match = formula.match(
            /oklch\(from\s+(var\([^)]+\))\s+([^)]+)\)/i
          );
          if (!match) return formula;

          const varRef = match[1];
          const transforms = match[2];

          // Get the base color
          let baseColor = baseColorOverride;
          if (!baseColor) {
            baseColor = resolveVarReference(varRef);

            // If we didn't resolve to a direct color, return the original
            if (baseColor.startsWith("var(")) {
              return formula;
            }
          }

          // If the base color is already OKLCH, parse it
          let l = 0.5,
            c = 0.1,
            h = 0;

          if (baseColor.startsWith("oklch")) {
            const oklchMatch = baseColor.match(
              /oklch\(([0-9.]+)\s+([0-9.]+)\s+([0-9.]+)\)/
            );
            if (oklchMatch) {
              l = parseFloat(oklchMatch[1]);
              c = parseFloat(oklchMatch[2]);
              h = parseFloat(oklchMatch[3]);
            }
          }
          // If it's hex, convert to OKLCH approximately
          else if (baseColor.startsWith("#")) {
            // This is a simplification - in production, use a proper color conversion library
            const r = parseInt(baseColor.slice(1, 3), 16) / 255;
            const g = parseInt(baseColor.slice(3, 5), 16) / 255;
            const b = parseInt(baseColor.slice(5, 7), 16) / 255;

            // Approximate lightness from RGB
            l = 0.2126 * r + 0.7152 * g + 0.0722 * b;

            // Simple approximation of chroma and hue
            const max = Math.max(r, g, b);
            const min = Math.min(r, g, b);
            c = (max - min) * 0.2; // Scaled down for OKLCH

            // Simplistic hue calculation
            if (max === min) h = 0;
            else if (max === r) h = ((g - b) / (max - min)) * 60;
            else if (max === g) h = ((b - r) / (max - min)) * 60 + 120;
            else h = ((r - g) / (max - min)) * 60 + 240;

            if (h < 0) h += 360;
          }

          // Process the transformation values
          // Handle lightness transformation
          if (transforms.includes("calc(1 - (1 - l) *")) {
            const factorMatch = transforms.match(
              /calc\(1 - \(1 - l\) \* ([0-9.]+)\)/
            );
            if (factorMatch) {
              const factor = parseFloat(factorMatch[1]);
              l = 1 - (1 - l) * factor; // Makes it lighter
            }
          } else if (transforms.includes("calc(l *")) {
            const factorMatch = transforms.match(/calc\(l \* ([0-9.]+)\)/);
            if (factorMatch) {
              const factor = parseFloat(factorMatch[1]);
              l = l * factor; // Makes it darker
            }
          }

          // Handle chroma transformation
          const chromaMatch = transforms.match(/calc\(c \* ([0-9.]+)\)/);
          if (chromaMatch) {
            const factor = parseFloat(chromaMatch[1]);
            c = c * factor;
          }

          // Handle hue transformation
          const hueMatch = transforms.match(/calc\(h \+ ([0-9.]+)\)/);
          if (hueMatch) {
            const offset = parseFloat(hueMatch[1]);
            h = h + offset;
          }

          // Keep values in valid ranges
          l = Math.max(0, Math.min(1, l));
          c = Math.max(0, Math.min(0.4, c));
          h = (h + 360) % 360;

          // Return as formatted OKLCH color
          return `oklch(${l.toFixed(3)} ${c.toFixed(3)} ${h.toFixed(1)})`;
        } catch (e) {
          console.error("Error resolving OKLCH formula:", e);
          return formula;
        }
      }

      // Calculate a shade from a base color
      function calculateShade(baseColor, shadeValue) {
        if (shadeValue === 500) return baseColor;

        if (baseColor.startsWith("#")) {
          // For hex colors
          const r = parseInt(baseColor.slice(1, 3), 16);
          const g = parseInt(baseColor.slice(3, 5), 16);
          const b = parseInt(baseColor.slice(5, 7), 16);

          if (shadeValue < 500) {
            // Lighter shades - mix with white
            const factor = 1 - shadeValue / 500;
            const nr = Math.round(r + (255 - r) * factor);
            const ng = Math.round(g + (255 - g) * factor);
            const nb = Math.round(b + (255 - b) * factor);

            return `#${nr.toString(16).padStart(2, "0")}${ng.toString(16).padStart(2, "0")}${nb.toString(16).padStart(2, "0")}`;
          } else {
            // Darker shades - mix with black
            const factor = (shadeValue - 500) / 500;
            const nr = Math.round(r * (1 - factor));
            const ng = Math.round(g * (1 - factor));
            const nb = Math.round(b * (1 - factor));

            return `#${nr.toString(16).padStart(2, "0")}${ng.toString(16).padStart(2, "0")}${nb.toString(16).padStart(2, "0")}`;
          }
        }

        // For OKLCH colors, use a simplified approach
        if (baseColor.startsWith("oklch")) {
          const match = baseColor.match(
            /oklch\(([0-9.]+)\s+([0-9.]+)\s+([0-9.]+)\)/
          );
          if (match) {
            const l = parseFloat(match[1]);
            const c = parseFloat(match[2]);
            const h = parseFloat(match[3]);

            if (shadeValue < 500) {
              // Lighter
              const factor = 1 - shadeValue / 500;
              const newL = l + (1 - l) * factor * 0.8;
              const newC = c * (1 - factor * 0.3);
              return `oklch(${newL.toFixed(3)} ${newC.toFixed(3)} ${h})`;
            } else {
              // Darker
              const factor = (shadeValue - 500) / 500;
              const newL = l * (1 - factor * 0.7);
              const newC = c * (1 + factor * 0.1);
              return `oklch(${newL.toFixed(3)} ${newC.toFixed(3)} ${h})`;
            }
          }
        }

        return baseColor;
      }

      // Toggle function
      const toggleCollapse = () => {
        if (!contentSection || !icon) return;

        if (contentSection.classList.contains("hidden")) {
          // Expand
          contentSection.classList.remove("hidden");
          icon.classList.add("rotate-180");
        } else {
          // Collapse
          contentSection.classList.add("hidden");
          icon.classList.remove("rotate-180");
        }
      };

      // Add click event
      toggleButton?.addEventListener("click", toggleCollapse);

      // Initial application of theme colors
      applyHeaderTheme();

      // Listen for style updates to refresh theme colors
      document.addEventListener("stylesUpdated", () => {
        applyHeaderTheme();
      });

      document.addEventListener("skinColorUpdated", () => {
        applyHeaderTheme();
      });

      // Initialize the rest of the functionality
      const checkUtilities = () => {
        if (
          window.altitudeThemeBuilder &&
          window.altitudeThemeBuilder.getSkinFromStorage &&
          window.currentStyles
        ) {
          applyHeaderTheme(); // Apply again once everything is loaded
          updateSkinDataFromStorage();
          return true;
        }
        return false;
      };

      const waitForUtilities = setInterval(() => {
        if (checkUtilities()) {
          clearInterval(waitForUtilities);
        }
      }, 50);

      // Update skin data from localStorage
      function updateSkinDataFromStorage() {
        // Refresh when localStorage changes
        document.addEventListener("stylesUpdated", () => {
          if (window.refreshSkinSwatches) {
            window.refreshSkinSwatches();
          }
          applyHeaderTheme(); // Update the header as well
        });

        document.addEventListener("skinsNeedRefresh", () => {
          if (window.refreshSkinSwatches) {
            window.refreshSkinSwatches();
          }
          applyHeaderTheme(); // Update the header as well
        });
      }
    });
  </script>
</div>

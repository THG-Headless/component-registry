---
// Import the registry data and metadata
import registryData from "../../registry.json";
import metadataDataRaw from "../../metadata.json";
import PreviewCard from "./PreviewCard.astro";

interface Metadata {
  [key: string]: {
    category: string;
  };
}

const metadataData: Metadata = metadataDataRaw as Metadata;

// TypeScript interfaces for type safety
interface RegistryFile {
  path: string;
  type: string;
}

interface RegistryComponent {
  name: string;
  type: string;
  title: string;
  description: string;
  registryDependencies?: string[];
  files: RegistryFile[];
}

interface ProcessedComponent extends RegistryComponent {
  formattedType: string;
  rawType: string;
  category: string | null;
}

interface ComponentsByType {
  [key: string]: ProcessedComponent[];
}

interface ClientComponent {
  title: string;
  type: string;
  description: string;
  name: string;
  path: string;
  category: string | null;
}

// Process each item to format the type tag and assign category
const components: ProcessedComponent[] = registryData.items.map(
  (item: RegistryComponent) => {
    // Assign category from metadata if available
    const category = metadataData[item.name]?.category || null;

    return {
      ...item,
      formattedType: item.type
        .replace("registry:", "")
        .replace(/^ui$/i, "UI") // Capitalize "ui" as "UI"
        .replace(/^\w/, (c) => c.toUpperCase()), // Capitalize first letter for other types
      rawType: item.type.replace("registry:", ""), // Get the raw type without the prefix
      category: category, // Add category from metadata
    };
  }
);

// Group components by their type
const componentsByType: ComponentsByType = components.reduce(
  (acc: ComponentsByType, component) => {
    const type = component.rawType;
    if (!acc[type]) {
      acc[type] = [];
    }
    acc[type].push(component);
    return acc;
  },
  {}
);

// Define the order of types
const typeOrder: string[] = [
  "ui",
  "component",
  "block",
  "page",
  "file",
  "lib",
  "hook",
];

// Get all types and sort them
const allTypes: string[] = Object.keys(componentsByType);
const sortedTypes: string[] = [
  // First, include the predefined types in the specified order (if they exist)
  ...typeOrder.filter((type) => allTypes.includes(type)),
  // Then include any other types in alphabetical order
  ...allTypes.filter((type) => !typeOrder.includes(type)).sort(),
];

// Sort components within each type by category first, then by title
// This ensures they're visually grouped by category
for (const type in componentsByType) {
  componentsByType[type].sort((a, b) => {
    if (a.category && !b.category) return -1;
    if (!a.category && b.category) return 1;
    if (a.category !== b.category) {
      return (a.category || "").localeCompare(b.category || "");
    }
    // Then sort by title within the same category
    return a.title.localeCompare(b.title);
  });
}
---

<div class="container mx-auto px-4 py-8">
  {
    sortedTypes.map((type) => (
      <div class="mb-12">
        <h2 class="text-xl font-bold mb-6 capitalize">
          {type === "ui" ? "UI" : type}
        </h2>

        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {componentsByType[type].map((component) => (
            <PreviewCard component={component} />
          ))}
        </div>
      </div>
    ))
  }
</div>

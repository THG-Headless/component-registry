---
import { parseColorValue } from "./utils/skinColorParser";
import SkinColorPanel from "./SkinColorPanel.astro";

interface Props {
  skinName: string;
  skinData: Record<string, Record<string, string>>;
}

const { skinName, skinData } = Astro.props;

// Ensure skinData is valid
const validSkinData = skinData || {};

// Flatten structure for display
const flattenedSwatches: Array<{
  category: string;
  state: string;
  colorValue: string;
}> = [];

Object.entries(validSkinData).forEach(([category, states]) => {
  Object.entries(states).forEach(([state, colorValue]) => {
    flattenedSwatches.push({
      category,
      state,
      colorValue,
    });
  });
});

// Group swatches by category
const groupedSwatches: Record<string, Array<any>> = {};
flattenedSwatches.forEach((swatch) => {
  if (!groupedSwatches[swatch.category]) {
    groupedSwatches[swatch.category] = [];
  }
  groupedSwatches[swatch.category].push(swatch);
});

// Define category icons - using slightly larger icons since they'll be the only identifier
const categoryIcons = {
  background: `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect width="18" height="18" x="3" y="3" rx="2" ry="2" fill="currentColor" opacity="0.5" /></svg>`,
  foreground: `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M8 9h8m-8 4h6" stroke-linecap="round" /></svg>`,
  border: `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect width="18" height="18" x="3" y="3" rx="2" ry="2" /></svg>`,
};

// Define state icons
const stateIcons = {
  default: `<svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="12" cy="12" r="4" fill="currentColor" /></svg>`,
  hover: `<svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M4 4l5 16l3-8l8-3z" /></svg>`,
  focus: `<svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="12" cy="12" r="9" /><circle cx="12" cy="12" r="4" fill="currentColor" /></svg>`,
  active: `<svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="12" cy="12" r="9" /><path d="M9 12l2 2l4-4" stroke-linecap="round" stroke-linejoin="round" /></svg>`,
  disabled: `<svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="12" cy="12" r="9" /><path d="M7 17L17 7M7 7l10 10" stroke-linecap="round" /></svg>`,
};

// Make sure we have consistent state order
const stateOrder = ["default", "hover", "focus", "active", "disabled"];
---

<div class="skin-configurator-container">
  <!-- Enhanced grid with header row and column -->
  <div class="overflow-x-auto">
    <table class="w-full border-separate border-spacing-1.5">
      <thead>
        <tr>
          {/* Empty corner cell */}
          <th class="w-14 h-6"></th>

          {/* State icons in header row */}
          {
            stateOrder.map((state) => (
              <th class="text-center align-middle pr-3">
                <div class="flex flex-col items-center">
                  <div
                    class="mb-1 text-zinc-300"
                    set:html={stateIcons[state]}
                  />
                </div>
              </th>
            ))
          }
        </tr>
      </thead>
      <tbody>
        {/* Rows for each category with category icon in first cell */}
        {
          Object.keys(groupedSwatches).map((category) => (
            <tr>
              {/* Category icon cell - only icon, no text */}
              <td class="align-middle text-center">
                <div
                  class="text-zinc-300 inline-flex justify-center"
                  title={category}
                  set:html={categoryIcons[category]}
                />
              </td>

              {/* Swatch cells - ensure consistent order */}
              {stateOrder.map((state) => {
                const swatch = groupedSwatches[category].find(
                  (s) => s.state === state
                );
                if (!swatch) return <td />;

                const panelId = `panel-${skinName}-${category}-${state}`;
                const colorValue = swatch.colorValue;

                return (
                  <td class="p-0">
                    <div
                      class="skin-swatch aspect-square rounded cursor-pointer hover:ring-2 hover:ring-blue-500 transition-all w-12 h-12 border border-zinc-300"
                      data-panel-id={panelId}
                      data-category={category}
                      data-state={state}
                      data-skin-name={skinName}
                      data-original-color={colorValue}
                    />
                  </td>
                );
              })}
            </tr>
          ))
        }
      </tbody>
    </table>
  </div>

  {/* Add panels for each color */}
  {
    flattenedSwatches.map(({ category, state, colorValue }) => (
      <SkinColorPanel
        skinName={skinName}
        category={category}
        state={state}
        colorValue={colorValue}
      />
    ))
  }

  <script>
    // Calculate color from CSS variable reference
    function calculateExplicitColor(colorVar) {
      if (!colorVar || typeof colorVar !== "string") return "transparent";
      if (!colorVar.startsWith("var(--color-")) return colorVar;

      try {
        // Parse variable structure: var(--color-name-shade)
        const match = colorVar.match(
          /var\(--color-([a-z]+)(?:-(\d+|[a-z_]+))?\)/i
        );
        if (!match) return "transparent";

        const [, colorName, shadeOrAlias] = match;

        // Use window.currentStyles which is most up-to-date
        const styles = window.currentStyles || {};
        if (!styles.colours?.site) return "transparent";

        // Handle simple colors
        if (colorName === "white") return "#ffffff";
        if (colorName === "black") return "#000000";

        // Base color
        const baseColor = styles.colours.site[colorName];
        if (!baseColor) return "transparent";

        // Just the base color (no shade/alias)
        if (!shadeOrAlias) return baseColor;

        // Handle numeric shades
        if (/^\d+$/.test(shadeOrAlias)) {
          // Shade 500 is the base color
          if (shadeOrAlias === "500") return baseColor;

          // Calculate shade
          return calculateShadeColor(baseColor, parseInt(shadeOrAlias));
        }

        // Handle aliases (e.g., primary-light, primary-hover)
        if (styles.colours.alias?.[colorName]?.[shadeOrAlias]) {
          const aliasShade = styles.colours.alias[colorName][shadeOrAlias];
          return calculateExplicitColor(
            `var(--color-${colorName}-${aliasShade})`
          );
        }

        return baseColor;
      } catch (error) {
        console.error("Error calculating color:", error);
        return "transparent";
      }
    }

    // Calculate a shade color from a base color and shade number
    function calculateShadeColor(baseColor, shade) {
      try {
        // Handle hex colors
        if (baseColor.startsWith("#")) {
          const r = parseInt(baseColor.slice(1, 3), 16);
          const g = parseInt(baseColor.slice(3, 5), 16);
          const b = parseInt(baseColor.slice(5, 7), 16);

          if (shade < 500) {
            // Lighter shade - mix with white
            const factor = 1 - shade / 500; // 0=500 (base) and 1=0 (white)
            return `rgb(${Math.min(255, Math.round(r + (255 - r) * factor))}, 
                        ${Math.min(255, Math.round(g + (255 - g) * factor))}, 
                        ${Math.min(255, Math.round(b + (255 - b) * factor))})`;
          } else {
            // Darker shade - mix with black
            const factor = (shade - 500) / 500; // 0=500 (base) and 1=1000 (black)
            return `rgb(${Math.round(r * (1 - factor))}, 
                        ${Math.round(g * (1 - factor))}, 
                        ${Math.round(b * (1 - factor))})`;
          }
        }

        // Handle OKLCH colors
        if (baseColor.startsWith("oklch")) {
          const matches = baseColor.match(
            /oklch\(([0-9.]+)\s+([0-9.]+)\s+([0-9.]+)\)/
          );
          if (matches) {
            const l = parseFloat(matches[1]);
            const c = parseFloat(matches[2]);
            const h = parseFloat(matches[3]);

            if (shade < 500) {
              // Lighter
              const factor = 1 - shade / 500;
              const newL = l + (1 - l) * factor * 0.8;
              const newC = Math.max(0, c * (1 - factor * 0.5));
              return `oklch(${newL.toFixed(3)} ${newC.toFixed(3)} ${h.toFixed(2)})`;
            } else {
              // Darker
              const factor = (shade - 500) / 500;
              const newL = l * (1 - factor * 0.8);
              const newC = c * (1 - factor * 0.3);
              return `oklch(${newL.toFixed(3)} ${newC.toFixed(3)} ${h.toFixed(2)})`;
            }
          }
        }

        return baseColor;
      } catch (err) {
        console.error("Error calculating shade:", err);
        return baseColor;
      }
    }

    // Apply color to a swatch
    function resolveAndApplyColor(swatch, colorValue) {
      const explicitColor = calculateExplicitColor(colorValue);
      swatch.style.backgroundColor = explicitColor;
      swatch.dataset.resolvedColor = explicitColor;
    }

    // Set up panel visibility
    function setupPanelVisibility() {
      const swatches = document.querySelectorAll(".skin-swatch");
      const panels = document.querySelectorAll(".skin-color-panel");

      // Track current active swatch
      let activeSwatch = null;

      swatches.forEach((swatch) => {
        swatch.addEventListener("click", (e) => {
          const clickedSwatch = e.currentTarget;
          const panelId = clickedSwatch.dataset.panelId;

          if (!panelId) return;

          // Check if this swatch is already active
          const isAlreadyActive = clickedSwatch === activeSwatch;

          // Reset all swatches and panels
          swatches.forEach((s) => {
            s.classList.remove("border-4", "border-purple-500");
            s.classList.add("border", "border-zinc-300");
          });

          panels.forEach((p) => {
            p.classList.add("hidden");
          });

          // If the swatch was already active, just collapse the panel
          if (isAlreadyActive) {
            activeSwatch = null;
            return;
          }

          // Set new active swatch and show its panel
          activeSwatch = clickedSwatch;
          clickedSwatch.classList.remove("border", "border-zinc-300");
          clickedSwatch.classList.add("border-4", "border-purple-500");

          const panel = document.getElementById(panelId);
          if (panel) {
            panel.classList.remove("hidden");
          }
        });
      });
    }

    // Update all skin swatches
    function refreshSkinSwatches() {
      if (!window.currentStyles) return;

      document.querySelectorAll(".skin-swatch").forEach((el) => {
        const swatch = el;
        const skinName = swatch.dataset.skinName;
        const category = swatch.dataset.category;
        const state = swatch.dataset.state;

        if (
          skinName &&
          category &&
          state &&
          window.currentStyles.skins?.[skinName]
        ) {
          const colorValue =
            window.currentStyles.skins[skinName][category]?.[state];
          if (colorValue) {
            swatch.dataset.originalColor = colorValue;
            resolveAndApplyColor(swatch, colorValue);
          }
        }
      });
    }

    // Make refresh function available globally
    window.refreshSkinSwatches = refreshSkinSwatches;

    // Listen for color updates
    const eventsToListenFor = [
      "colorSelected",
      "skinColorUpdated",
      "stylesUpdated",
      "skinsNeedRefresh",
      "shadesUpdated",
    ];

    eventsToListenFor.forEach((eventName) => {
      document.addEventListener(eventName, () => {
        setTimeout(refreshSkinSwatches, 50);
      });
    });

    // Initialize on page load
    function initialize() {
      if (window.currentStyles) {
        refreshSkinSwatches();
        setupPanelVisibility();
      } else {
        setTimeout(initialize, 100);
      }
    }

    initialize();
  </script>
</div>

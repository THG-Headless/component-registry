---
import SidebarTabs from "./SidebarTabs.astro";
import ColorSection from "./ColorSection.astro";
import TypographySection from "./TypographySection.astro";
import BorderSection from "./BorderSection.astro";
import ShadowSection from "./ShadowSection.astro";
import AnimationSection from "./AnimationSection.astro";
import SkinSection from "./SkinSection.astro";

import { styles } from "./utils/defaultTheme";

const formatSkinName = (skin: string) => {
  if (skin === "skin") return "Default";
  return skin
    .replace(/^skin/, "")
    .replace(/([A-Z])/g, " $1")
    .trim();
};

const tabs = [
  {
    id: "colors",
    label: "Colors",
    sections: Object.keys(styles.colours.site).map((color) => ({
      id: `color-${color}`,
      label: color,
    })),
  },
  {
    id: "skins",
    label: "Skins",
    sections: Object.keys(styles.skins).map((skin) => ({
      id: `skin-${skin}`,
      label: formatSkinName(skin),
    })),
  },
  {
    id: "typography",
    label: "Typography",
    sections: [
      { id: "desktop-typography", label: "Desktop Typography" },
      { id: "mobile-typography", label: "Mobile Typography" },
      { id: "font-weights", label: "Font Weights" },
    ],
  },
  {
    id: "border",
    label: "Border",
    sections: [{ id: "border-radius", label: "Border Radius" }],
  },
  {
    id: "shadow",
    label: "Shadow",
    sections: [{ id: "shadow", label: "Box Shadow" }],
  },
  {
    id: "animation",
    label: "Animation",
    sections: [{ id: "animation-timing", label: "Animation Timing" }],
  },
];

const activeTab = "colors";

// Stringify the styles object to inject as initial state for client-side JS
const initialStylesJson = JSON.stringify(styles);
---

<div class="w-[600px] flex-shrink-0 flex h-full bg-zinc-900">
  <SidebarTabs tabs={tabs} activeTab={activeTab} />

  <!-- Main content area -->
  <div
    class="flex-1 overflow-y-auto p-4 bg-zinc-900 text-zinc-300"
    id="content-area"
  >
    <!-- Colors Tab -->
    <div class="tab-content" data-tab-content="colors">
      {
        Object.entries(styles.colours.site).map(([colorName, colorValue]) => (
          <ColorSection
            colorName={colorName}
            colorValue={colorValue.toString()}
            colorShades={styles.colours.shades[colorName]}
            colorAliases={styles.colours.alias[colorName]}
          />
        ))
      }
    </div>

    <!-- Typography Tab -->
    <TypographySection
      desktop={styles.typography.desktop}
      mobile={styles.typography.mobile}
      weights={styles.typography.weights}
    />

    <!-- Border Tab -->
    <BorderSection radius={styles.radius} />

    <!-- Shadow Tab -->
    <ShadowSection shadow={styles.shadow} />

    <!-- Animation Tab -->
    <AnimationSection animation={styles.animation} />

    <!-- Skins Tab -->
    <SkinSection />
  </div>
</div>

<!-- Inject the initial styles as a global variable for client-side access -->
<script define:vars={{ initialStylesJson }}>
  window.initialStyles = JSON.parse(initialStylesJson);
</script>

<script>
  import initializeStyleManager from "./utils/styleManager";

  declare global {
    interface Window {
      initialStyles: any;
    }
  }

  // Break down the initialization into the smallest possible tasks
  document.addEventListener("DOMContentLoaded", () => {
    // Defer everything outside of DOMContentLoaded
    setTimeout(() => {
      // Set up a minimal first task - just to prepare initialization
      const stylesData = window.initialStyles;

      // Separate style manager initialization into stages
      setTimeout(() => {
        // Step 1: Basic initialization (this might still be heavy)
        // Let's wrap heavy operations in try/catch to prevent critical failures
        try {
          initializeStyleManager(stylesData);
        } catch (e) {
          console.error("Error initializing style manager:", e);
        }
      }, 50);

      // UI synchronization with more delay
      setTimeout(() => {
        if (typeof (window as any).synchronizeUIWithStyles === "function") {
          try {
            (window as any).synchronizeUIWithStyles();
          } catch (e) {
            console.error("Error synchronizing UI:", e);
          }
        }
      }, 100);

      // Shadow UI rebuild with more delay
      setTimeout(() => {
        try {
          const currentShadow = (window as any).currentStyles?.shadow;
          if (
            currentShadow &&
            typeof (window as any).rebuildShadowFromInput === "function"
          ) {
            (window as any).rebuildShadowFromInput(currentShadow);
          }
        } catch (e) {
          console.error("Error rebuilding shadow UI:", e);
        }
      }, 150);

      // Typography updates - process only 1 field at a time with significant delay between each
      setTimeout(() => {
        try {
          const typographyFields = Array.from(
            document.querySelectorAll("[data-typography-field]")
          );

          // Process one field at a time with a big enough delay between each
          const processField = (index: number) => {
            if (index >= typographyFields.length) return;

            const field = typographyFields[index] as HTMLInputElement;
            const fieldPath = field.getAttribute("data-typography-field");

            if (fieldPath) {
              // Process this field
              document.dispatchEvent(
                new CustomEvent("typographyChanged", {
                  detail: {
                    path: fieldPath,
                    value: parseInt(field.value, 10),
                  },
                  bubbles: true,
                })
              );
            }

            // Schedule the next field with a delay
            setTimeout(() => processField(index + 1), 20);
          };

          // Start processing with the first field
          if (typographyFields.length > 0) {
            processField(0);
          }
        } catch (e) {
          console.error("Error processing typography fields:", e);
        }
      }, 200);

      // Check URL hash with a significant delay
      setTimeout(() => {
        try {
          const urlHash = window.location.hash;
          if (
            urlHash &&
            (urlHash.includes("typography") || urlHash.includes("font"))
          ) {
            const typographyTab = document.querySelector(
              '[data-tab="typography"]'
            );
            if (typographyTab) {
              typographyTab.dispatchEvent(new Event("click"));
            }
          }
        } catch (e) {
          console.error("Error handling URL hash:", e);
        }
      }, 250);
    }, 10);
  });
</script>

<style>
  .hidden {
    display: none;
  }

  /* Smooth transition for expanding section links and shade sections */
  [data-section-links],
  [data-shades-section],
  [data-aliases-section] {
    transition: max-height 0.3s ease-in-out;
  }

  /* Range input styling */
  input[type="range"] {
    -webkit-appearance: none;
    appearance: none;
    height: 6px;
    background: #3f3f46; /* zinc-700 */
    border-radius: 4px;
    outline: none;
  }

  input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 14px;
    height: 14px;
    border-radius: 50%;
    background: #a855f7; /* purple-500 */
    cursor: pointer;
  }

  input[type="range"]::-moz-range-thumb {
    width: 14px;
    height: 14px;
    border-radius: 50%;
    background: #a855f7; /* purple-500 */
    cursor: pointer;
  }

  /* Scrollbar styling */
  ::-webkit-scrollbar {
    width: 10px;
    height: 10px;
  }

  ::-webkit-scrollbar-track {
    background: #18181b; /* zinc-900 */
  }

  ::-webkit-scrollbar-thumb {
    background: #3f3f46; /* zinc-700 */
    border-radius: 8px;
  }

  ::-webkit-scrollbar-thumb:hover {
    background: #7e22ce; /* purple-700 */
  }

  /* Firefox scrollbar styling */
  * {
    scrollbar-width: thick;
    scrollbar-color: #3f3f46 #18181b; /* thumb track */
  }
</style>
